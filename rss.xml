<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>手撕包菜</title>
        <link>https://www.baocai-blog.cn</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 30 Oct 2020 18:48:44 +0800</pubDate>
        <lastBuildDate>Fri, 30 Oct 2020 18:48:44 +0800</lastBuildDate>
        <category>Java基础</category>
        <category>框架</category>
        <category>数据库</category>
        <category>面向对象</category>
        <category>XML，JSON</category>
        <category>html</category>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/30/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
            <title>html标签</title>
            <link>https://www.baocai-blog.cn/2020/10/30/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
            <category>html</category>
            <pubDate>Fri, 30 Oct 2020 18:48:44 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;html常用标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html常用标签&#34;&gt;#&lt;/a&gt; html 常用标签&lt;/h1&gt;
&lt;h2 id=&#34;格式化标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化标签&#34;&gt;#&lt;/a&gt; 格式化标签&lt;/h2&gt;
&lt;p&gt;格式标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		&amp;lt;br /&amp;gt;  换行
		&amp;lt;p&amp;gt;   &amp;lt;/p&amp;gt;  换段
		&amp;lt;hr /&amp;gt;   水平线分割
		列表：
		&amp;lt;ul&amp;gt;   &amp;lt;/ul&amp;gt;  无序列表
		&amp;lt;ol&amp;gt;   &amp;lt;/ol&amp;gt;  有序列表，type类型值：A a I i 1 start属性表示起始值
		&amp;lt;li&amp;gt;   &amp;lt;/li&amp;gt;  列表项
		      &amp;lt;dl&amp;gt;   &amp;lt;/dl&amp;gt;   自定义列表
			  &amp;lt;dt&amp;gt;   &amp;lt;/dt&amp;gt;   自定义列表头
			  &amp;lt;dd&amp;gt;   &amp;lt;/dd&amp;gt;   自定义列表内容
	    &amp;lt;div&amp;gt;   &amp;lt;/div&amp;gt;  常用于组合块级元素 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;图像标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图像标签&#34;&gt;#&lt;/a&gt; 图像标签&lt;/h2&gt;
&lt;p&gt;图像标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&#34;#&#34; alt=&#34;加载失败&#34; title=&#34;这是一张图片&#34; width=&#34;200&#34;
		height=&#34;200&#34; border=&#34;0&#34;/&amp;gt;
		src: 图片路径
		alt: 加载失败信息
		title: 文字提示属性
		width: 宽度
		height: 高度
		border: 边框线粗细
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;超链接标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超链接标签&#34;&gt;#&lt;/a&gt; 超链接标签&lt;/h2&gt;
&lt;p&gt;超链接标签:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		&amp;lt;a href=&#34;#&#34; target=&#34;_blank&#34;&amp;gt;&amp;lt;/a&amp;gt;
		href: 链接跳转地址
		target: 链接打开方式
			_blank 新窗口
			_parent 父窗口
			_self 本窗口（默认）
			_top 顶级窗口
			framename 窗口名
			title: 文字提示属性
		锚点链接：
			定义：
			&amp;lt;a id=&#34;ab&#34;&amp;gt;&amp;lt;/a&amp;gt; 旧方法: &amp;lt;a name=&#34;ab&#34;&amp;gt;&amp;lt;/a&amp;gt;
			使用:
			&amp;lt;a href=&#34;#ab&#34;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;表格标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表格标签&#34;&gt;#&lt;/a&gt; 表格标签&lt;/h2&gt;
&lt;p&gt;表格标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table cellpadding=&#34;单元格边距&#34; cellspacing=&#34;单元格间距&#34;&amp;gt;
			&amp;lt;caption&amp;gt;标题&amp;lt;/caption&amp;gt;
			&amp;lt;th colspan=&#34;2&#34;&amp;gt;表头,占据两列单元格&amp;lt;/th&amp;gt;
			&amp;lt;th rowspan=&#34;2&#34;&amp;gt;表头,据两行单元格&amp;lt;/th&amp;gt;
			&amp;lt;td&amp;gt;表格内容&amp;lt;/td&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;表单标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表单标签&#34;&gt;#&lt;/a&gt; 表单标签&lt;/h2&gt;
&lt;p&gt;表单标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&#34;#&#34; method=&#34;get/post&#34;&amp;gt;
			action:提交的目标地址
			method: 提交方式
				get: URL地址可见，长度限制，不安全
				post: URL地址不可见，安全
			&amp;lt;input type=&#34;text&#34; name=&#34;&#34; /&amp;gt;
			input定义输入字段。
				type属性:
					text: 文本
					password: 密码
					checkbox: 多选
					radio: 单选
					file: 文件上传
					button: 普通按钮
					submit: 提交按钮
					image: 提交图片
					...
			&amp;lt;select name=&#34;&#34; size=&#34;3&#34; disabled=&#34;false&#34; multiple=&#34;multiple&#34;&amp;gt;
				&amp;lt;option value=&#34;1&#34; selected=&#34;selected&#34;&amp;gt; &amp;lt;/option&amp;gt;
				value: 下拉属性的值
				sekected: 默认下拉指定项
				&amp;lt;textarea&amp;gt;多行文本输入&amp;lt;/textarea&amp;gt;
				name: 定义名称，存储文本域中的值
				cols: 可见列数
				rows: 可见行数
				diabled: 是否禁用
				readonly: 只读
			&amp;lt;/select&amp;gt;
			name: 定义名称，存储下拉值
			size: 菜单项目的数目 
			disabled: 禁用菜单
			multiple: 多选
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;框架标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架标签&#34;&gt;#&lt;/a&gt; 框架标签&lt;/h2&gt;
&lt;p&gt;框架标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe src=&#34;&#34; name=&#34;&#34; width=&#34;&#34; height=&#34;&#34;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多媒体标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多媒体标签&#34;&gt;#&lt;/a&gt; 多媒体标签&lt;/h2&gt;
&lt;p&gt;音频标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;audio src=&#34;&#34; &amp;gt;
			当前浏览器不支持audio
		&amp;lt;/audio&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;视频标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	&amp;lt;video width=&#34;800&#34; height=&#34;&#34;&amp;gt;
		&amp;lt;source src=&#34;myvideo.mp4&#34; type=&#34;video/mp4&#34;&amp;gt;&amp;lt;/source&amp;gt;
		&amp;lt;source src=&#34;myvideo.ogv&#34; type=&#34;video/ogg&#34;&amp;gt;&amp;lt;/source&amp;gt;
		&amp;lt;source src=&#34;myvideo.webm&#34; type=&#34;video/webm&#34;&amp;gt;&amp;lt;/source&amp;gt;
		&amp;lt;object width=&#34;&#34; height=&#34;&#34; type=&#34;application/x-shockwave-flash&#34; data=&#34;myvideo.swf&#34;&amp;gt;
			&amp;lt;param name=&#34;movie&#34; value=&#34;myvideo.swf&#34; /&amp;gt;
			&amp;lt;param name=&#34;flashvars&#34; value=&#34;autostart=true&amp;amp;amp;file=myvideo.swf&#34; /&amp;gt;
		&amp;lt;/object&amp;gt;
		当前浏览器不支持 video直接播放，点击这里下载视频： &amp;lt;a href=&#34;myvideo.webm&#34;&amp;gt;下载视频&amp;lt;/a&amp;gt;
	&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/27/XML%E5%92%8CJSON/</guid>
            <title>XML和JSON</title>
            <link>https://www.baocai-blog.cn/2020/10/27/XML%E5%92%8CJSON/</link>
            <category>XML，JSON</category>
            <pubDate>Tue, 27 Oct 2020 21:06:54 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;xml和json&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xml和json&#34;&gt;#&lt;/a&gt; XML 和 JSON&lt;/h1&gt;
&lt;h2 id=&#34;xml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xml&#34;&gt;#&lt;/a&gt; XML&lt;/h2&gt;
&lt;h3 id=&#34;声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#声明&#34;&gt;#&lt;/a&gt; 声明&lt;/h3&gt;
&lt;p&gt;&amp;lt;?xml version=&#34;1.0&#34;encoding=&#34;UTF-8&#34;?&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;概念和作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念和作用&#34;&gt;#&lt;/a&gt; 概念和作用&lt;/h3&gt;
&lt;p&gt;可扩展标记语言（eXtensible Markup Language）。&lt;br&gt;
特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;xml 具有平台无关性，是一门独立的标记语言.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xml 具有自我描述性&lt;/p&gt;
&lt;p&gt;.XML 文件是保存 XML 数据的一种方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;标记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标记&#34;&gt;#&lt;/a&gt; 标记&lt;/h3&gt;
&lt;p&gt;标记名称: &amp;nbsp;&lt;br&gt;
自定义名称，必须遵循以下命名规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;名称可以含字母、数字以及其他的字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名称不能以数字或者标点符号开始&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名称不能以字符 “xml”（或者 XML、Xml）开始&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名称不能包含空格，不能包含冒（:）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名称区分大小写&lt;br&gt;
例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;persons&amp;gt;&lt;br&gt;
&amp;lt;person&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      &amp;lt;name&amp;gt;李四&amp;lt;/name&amp;gt;

      &amp;lt;length&amp;gt;180cm&amp;lt;/length&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

&amp;lt;/person&amp;gt; 
   &amp;lt;person&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;           、

       &amp;lt;name&amp;gt;李四&amp;lt;/name&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

       &amp;lt;length&amp;gt;200cm&amp;lt;/length&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;  

    &amp;lt;/person&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;/persons&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


### 标记中添加属性

标记中的属性, 在标记开始时 描述, 由属性名和属性值 组成. &amp;nbsp; &amp;nbsp; &amp;nbsp;  
格式: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 
1. 在开始标记中, 描述属性. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

2. 可以包含0-n个属性, 每一个属性是一个键值对! &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

3. 属性名不允许重复 , 键与值之间使用等号连接, 多个属性之间使用空格分割. 

4. 属性值 必须被引号引住.
 案例: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  

  ```
   &amp;lt;persons&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  
           &amp;lt;person id=&#34;10001&#34; groupid=&#34;1&#34;&amp;gt; &amp;nbsp; &amp;nbsp;
  
    ​                 &amp;lt;name&amp;gt;李四&amp;lt;/name&amp;gt;
  
    ​                 &amp;lt;age&amp;gt;18&amp;lt;/age&amp;gt; 
  
    ​         &amp;lt;/person&amp;gt;
    ​         &amp;lt;person id=&#34;10002&#34; groupid=&#34;1&#34;&amp;gt; &amp;nbsp; &amp;nbsp; 
  
    ​                &amp;lt;name&amp;gt;李四&amp;lt;/name&amp;gt; &amp;nbsp; &amp;nbsp;
  
    ​                &amp;lt;age&amp;gt;20&amp;lt;/age&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  
  
    ​         &amp;lt;/person&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  
  
    &amp;lt;/persons&amp;gt;
  ```
 
  


### 注释

格式: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  
   注释开始: &amp;nbsp; &amp;lt;!- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  
   注释结束: &amp;nbsp; --&amp;gt;

## XML解析

### SAX解析

解析方式是事件驱动机制! &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  

SAX解析器, 逐行读取XML文件解析 , 每当解析到一个标签的开始/结束/内容/属性时,触发事件.
优点: 

1. 分析能够立即开始，而不是等待所有的数据被处理
2. 逐行加载,节省内存.有助于解析大于系统内存的文档
3. 有时不必解析整个文档,它可以在某个条件得到满足时停止解析.

缺点: 
1. 单向解析，无法定位文档层次，无法同时访问同一文档的不同部分数据(因为逐 行解析, 当解析第n行是, 第n-1行已经被释放了, 无法在进行操作了). &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 
2. 无法得知事件发生时元素的层次, 只能自己维护节点的父/子关系. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 
3. 只读解析方式, 无法修改XML文档的内容.

### DOM解析

是用与平台和语言无关的方式表示XML文档的官方W3C标准，分析该结构通常需要加载整个文档和内存中建立文档树模型.程序员可以通过操作文档树, 来完成数据的获取 修改 删除等.

优点: 
1. 文档在内存中加载, 允许对数据和结构做出更改.
2. 访问是双向的，可以在任何时候在树中双向解析数据。

缺点:
   文档全部加载在内存中 , 消耗资源大.


### JDOM解析

目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一 个Java特定模型，JDOM一直得到大力推广和促进。
JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java/XML问题” （根据学习曲线假定为20%）     优点: 
1. 使用具体类而不是接口，简化了DOM的API。
2. 大量使用了Java集合类，方便了Java开发人员。

缺点:
1. 没有较好的灵活性。                
2. 性能不是那么优异

### DOM4J解析

它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath 支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项， DOM4J是一个非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一 个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML。
目前许多开源项目中大量采用DOM4J , 例如:Hibernate
步骤:
1.  引入jar文件 dom4j.jar &amp;nbsp;  
2.  创建一个指向XML文件的输入流 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; FileInputStream fis = new FileInputStream(&#34;xml文件的地址&#34;); 
3.  创建一个XML读取工具对象 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SAXReader sr = new SAXReader(); &amp;nbsp; 
4.  使用读取工具对象, 读取XML文档的输入流 , 并得到文档对象 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  Document doc = sr.read(fis); &amp;nbsp; &amp;nbsp; 
5.   通过文档对象, 获取XML文档中的根元素对象   &amp;nbsp;Element root = doc.getRootElement();

## JSON

### 概念

JSON: JavaScript Object Notation 
JS对象简谱 , 是一种轻量级的数据交换格式.


### 对象格式

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;js:&lt;/p&gt;
&lt;p&gt;​	var b = new Object();&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2IubmFtZQ==&#34;&gt;b.name&lt;/span&gt; = &#34;金苹果&#34;;&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2IuaW5mbw==&#34;&gt;b.info&lt;/span&gt; = &#34;种苹果&#34;;&lt;/p&gt;
&lt;p&gt;XML:&lt;/p&gt;
&lt;p&gt;​		&amp;lt;book&amp;gt;&lt;/p&gt;
&lt;p&gt;​				 &amp;lt;name&amp;gt; 金苹果 &amp;lt;/name&amp;gt;&lt;/p&gt;
&lt;p&gt;​				&amp;lt;info&amp;gt; 种苹果 &amp;lt;/info&amp;gt;&lt;/p&gt;
&lt;p&gt;​		&amp;lt;/book&amp;gt;&lt;/p&gt;
&lt;p  =&#34;&#34; name:金苹果, info:种苹果 =&#34;&#34;&gt;JSON: &amp;nbsp;     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

 一个对象, 由一个大括号表示. &amp;nbsp; &amp;nbsp; &amp;nbsp;  

括号中 描述对象的属性 .  通过键值对来描述对象的属性(可以理解为, 大括号中, 包含的是一个个的键值对.) &amp;nbsp; &amp;nbsp; &amp;nbsp; 

 格式:            
 1. 键与值之间使用冒号连接, 多个键值对之间使用逗号分隔.            
 2. 键值对的键 应使用引号引住 (通常Java解析时, 键不使用引号会报错. 而JS能正确解 析.)            
 3. 键值对的值, 可以是JS中的任意类型的数据


### GSON

- 将对象转换为JSON字符串
转换JSON字符串的步骤: &amp;nbsp; 
1. 引入JAR包 &amp;nbsp; &amp;nbsp;

2. 在需要转换JSON字符串的位置编写如下代码即可: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;String json = new Gson().toJSON(要转换的对象);   
   案例: &amp;nbsp;  
       Book b = BookDao.find();   
       String json = new Gson().toJson(b); &amp;nbsp; 

      &amp;nbsp;System.out.println(json);
- 将JSON字符串转换为对象
1. &amp;nbsp;引入JAR包 &amp;nbsp; &amp;nbsp;
2. &amp;nbsp;在需要转换Java对象的位置, 编写如下代码: &amp;nbsp; &amp;nbsp; &amp;nbsp; 对象 = new Gson().fromJson(JSON字符串,对象类型.class);

案例: &amp;nbsp; &amp;nbsp;

​      String json = &#34;{\&#34;id\&#34;:1,\&#34;name\&#34;:\&#34;金苹果\&#34;,\&#34;author\&#34;:\&#34;李伟杰 \&#34;,\&#34;info\&#34;:\&#34;嘿嘿嘿嘿嘿嘿\&#34;,\&#34;price\&#34;:198.0}&#34;; &amp;nbsp; &amp;nbsp;

​      Book book = new Gson().fromJson(json, Book.class); &amp;nbsp; &amp;nbsp;

​      System.out.println(book);


### FastJson

- 将对象转换为JSON字符串
转换JSON字符串的步骤: &amp;nbsp; &amp;nbsp;
1. 引入JAR包 &amp;nbsp; &amp;nbsp;

2. &amp;nbsp;在需要转换JSON字符串的位置编写如下代码即可: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
String json=JSON.toJSONString(要转换的对象); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

   案例: &amp;nbsp;  
   
    Book b = BookDao.find(); &amp;nbsp; &amp;nbsp;

​        String json=JSON.toJSONString(b); &amp;nbsp; &amp;nbsp;

​        System.out.println(json);

- 将JSON字符串转换为对象
1. &amp;nbsp;引入JAR包 &amp;nbsp; 
2. &amp;nbsp;在需要转换Java对象的位置, 编写如下代码: &amp;nbsp; &amp;nbsp; &amp;nbsp;     类型 对象名=JSON.parseObject(JSON字符串, 类型.class);                或 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;List&amp;lt;类型&amp;gt; list=JSON.parseArray(JSON字符串,类型.class); 

   案例: &amp;nbsp; &amp;nbsp;

​         String json = &#34;{\&#34;id\&#34;:1,\&#34;name\&#34;:\&#34;金苹果\&#34;,\&#34;author\&#34;:\&#34;李伟杰 \&#34;,\&#34;info\&#34;:\&#34;嘿嘿嘿嘿嘿嘿\&#34;,\&#34;price\&#34;:198.0}&#34;; &amp;nbsp; &amp;nbsp;

​         Book book = JSON.parseObject(json, Book.class); &amp;nbsp; &amp;nbsp;System.out.println(book);&lt;/code&gt;&lt;/pre&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/13/SpringBoot/</guid>
            <title>SpringBoot</title>
            <link>https://www.baocai-blog.cn/2020/10/13/SpringBoot/</link>
            <category>框架</category>
            <pubDate>Tue, 13 Oct 2020 21:46:19 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;springboot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot&#34;&gt;#&lt;/a&gt; SpringBoot&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;h3 id=&#34;什么是springboot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是springboot&#34;&gt;#&lt;/a&gt; 什么是 SpringBoot&lt;/h3&gt;
&lt;p&gt;spring boot 为 spring 服务，用来简化新 spring 应用的初始搭建以及开发过程&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;减少开发，测试时间和努力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 JavaConfig 有助于避免使用 XML。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免大量的 Maven 导入和各种版本冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供意见发展方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过提供默认值快速开始开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有单独的 Web 服务器需要。这意味着你不再需要启动 Tomcat，Glassfish 或其他任何东西。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要更少的配置 因为没有 web.xml 文件。只需添加用 @ Configuration 注释的类，然后添加用 @Bean 注释的方法，Spring 将自动加载对象并像以前一样对其进行管理。您甚至可以将 @Autowired 添加到 bean 方法中，以使 Spring 自动装入需要的依赖关系中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于环境的配置 使用这些属性，您可以将您正在使用的环境传递到应用程序：-Dspring.profiles.active = {enviornment}。在加载主应用程序属性文件后，Spring 将在（application {environment} .properties）中加载后续的应用程序属性文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见问题&#34;&gt;#&lt;/a&gt; 常见问题&lt;/h2&gt;
&lt;h3 id=&#34;springboot核心配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot核心配置文件&#34;&gt;#&lt;/a&gt; SpringBoot 核心配置文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，且 boostrap 里面的属性不能被覆盖；&lt;/li&gt;
&lt;li&gt;application (. yml 或者 . properties)：用于 spring boot 项目的自动化配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/13/JavaWeb/</guid>
            <title>JavaWeb</title>
            <link>https://www.baocai-blog.cn/2020/10/13/JavaWeb/</link>
            <category>Java基础</category>
            <pubDate>Tue, 13 Oct 2020 21:44:14 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;javaweb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javaweb&#34;&gt;#&lt;/a&gt; JavaWeb&lt;/h1&gt;
&lt;h3 id=&#34;说下原生jdbc操作数据库流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说下原生jdbc操作数据库流程&#34;&gt;#&lt;/a&gt; 说下原生 jdbc 操作数据库流程？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一步：Class.forName () 加载数据库连接驱动；&lt;/li&gt;
&lt;li&gt;第二步：DriverManager.getConnection () 获取数据连接对象；&lt;/li&gt;
&lt;li&gt;第三步：根据 SQL 获取 sql 会话对象，有 2 种方式 Statement、PreparedStatement ;&lt;/li&gt;
&lt;li&gt;第四步：执行 SQL 处理结果集，执行 SQL 前如果有参数值就设置参数值 setXXX ();&lt;/li&gt;
&lt;li&gt;第五步：关闭结果集、关闭会话、关闭连接。&lt;br&gt;
详细代码请看（封装）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjk1NDI2MTEvYXJ0aWNsZS9kZXRhaWxzLzUyNDI2MDA2&#34;&gt;http://blog.csdn.net/qq_29542611/article/details/52426006&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;session-和-cookie-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session-和-cookie-有什么区别&#34;&gt;#&lt;/a&gt; session 和 cookie 有什么区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储位置不同：session 存储在服务器端；cookie 存储在浏览器端。&lt;/li&gt;
&lt;li&gt;安全性不同：cookie 安全性一般，在浏览器存储，可以被伪造和修改。&lt;/li&gt;
&lt;li&gt;容量和个数限制：cookie 有容量限制，每个站点下的 cookie 也有个数限制。&lt;/li&gt;
&lt;li&gt;存储的多样性：session 可以存储在 Redis 中、数据库中、应用程序中；而 cookie 只能存储在浏览器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简述-tcp-和-udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述-tcp-和-udp的区别&#34;&gt;#&lt;/a&gt; 简述 tcp 和 udp 的区别？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;tcp&lt;/strong&gt; 和 &lt;strong&gt;udp&lt;/strong&gt; 是 OSI 模型中的运输层中的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcp&lt;/strong&gt; 提供可靠的通信传输    &lt;strong&gt;udp&lt;/strong&gt; 则常被用于让广播和细节控制交给应用的通信传输。&lt;/p&gt;
&lt;p&gt;两者的区别大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp &lt;strong&gt;面向连接&lt;/strong&gt;，udp &lt;strong&gt;面向非连接&lt;/strong&gt;即发送数据前不需要建立链接；&lt;/li&gt;
&lt;li&gt;tcp 提供可靠的服务（数据传输），udp 无法保证；&lt;/li&gt;
&lt;li&gt;tcp 面向字节流，udp 面向报文；&lt;/li&gt;
&lt;li&gt;tcp 数据传输慢，udp 数据传输快；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp三次握手&#34;&gt;#&lt;/a&gt; tcp 三次握手&lt;/h3&gt;
&lt;p&gt;第一次&lt;/p&gt;
&lt;p&gt;第一次握手：建立连接时，客户端  发送&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=&#34;&gt; syn&lt;/span&gt; 包（seq=j）到  服务器，并进入 SYN_SENT 状态，等待  服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 [3]&lt;/p&gt;
&lt;p&gt;第二次&lt;/p&gt;
&lt;p&gt;第二次握手：服务器  收到&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=&#34;&gt; syn&lt;/span&gt; 包，必须确认  客户端  的 SYN（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=&#34;&gt;ack&lt;/span&gt;=j+1），同时自己也发送一个 SYN 包（seq=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。 [3]&lt;/p&gt;
&lt;p&gt;第三次&lt;/p&gt;
&lt;p&gt;第三次握手：客户端  收到  服务器  的 SYN+ACK 包，向  服务器  发送确认包 ACK (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=&#34;&gt;ack&lt;/span&gt;=k+1），此包发送完毕，客户端和服务器进入&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9FU1RBQkxJU0hFRA==&#34;&gt; ESTABLISHED&lt;/span&gt;（TCP 连接成功）状态，完成三次握手。&lt;/p&gt;
&lt;h3 id=&#34;为什么要三次握手两次不行吗为什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要三次握手两次不行吗为什么&#34;&gt;#&lt;/a&gt; 为什么要三次握手，两次不行吗？为什么？&lt;/h3&gt;
&lt;p&gt;如果采用两次握手，那么只要&lt;strong&gt;服务器&lt;/strong&gt;发出确认数据包就会建立连接，但由于&lt;strong&gt;客户端&lt;/strong&gt;此时并未响应服务器端的请求，那此时&lt;strong&gt;服务器端&lt;/strong&gt;就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。&lt;/p&gt;
&lt;p&gt;若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/13/MySQL/</guid>
            <title>MySQL</title>
            <link>https://www.baocai-blog.cn/2020/10/13/MySQL/</link>
            <category>数据库</category>
            <pubDate>Tue, 13 Oct 2020 21:43:55 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;h3 id=&#34;数据库的三范式是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的三范式是什么&#34;&gt;#&lt;/a&gt; 数据库的三范式是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一范式：强调的是原子性，即数据库表的每一列都是不可分割的原子数据项。&lt;/li&gt;
&lt;li&gt;第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。&lt;/li&gt;
&lt;li&gt;第三范式：任何非主属性不依赖于其它非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql-的内连接-左连接-右连接有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-的内连接-左连接-右连接有什么区别&#34;&gt;#&lt;/a&gt; MySQL 的内连接、左连接、右连接有什么区别？&lt;/h3&gt;
&lt;p&gt;内连接关键字：inner join；左连接：left join；右连接：right join。&lt;/p&gt;
&lt;p&gt;内连接是把匹配的关联数 据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。&lt;/p&gt;
&lt;h3 id=&#34;数据库基本操作语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库基本操作语句&#34;&gt;#&lt;/a&gt; 数据库基本操作语句&lt;/h3&gt;
&lt;p&gt;主键约束 (primary key)  唯一约束 (unique) 非空约束 (not null) 外键约束 (foreign key)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;select&lt;/strong&gt; ... from 表名  where 条件  group by  分组字段  having 条件  order by  排序字段 ase|desc&lt;/p&gt;
&lt;p&gt;去重操作&lt;strong&gt; distinct&lt;/strong&gt;             select distinct 字段名，字段名 2 from 表名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insert  into  &amp;lt;表名&amp;gt;  [列名]  values  &amp;lt; 列值 &amp;gt;                delete  from  &amp;lt; 表名 &amp;gt;  where  &amp;lt; 删除条件 &amp;gt;&lt;/strong&gt;**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update 表名 set  字段名 = 字段值，字段名 = 字段值   [where 修改条件];&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库特性&#34;&gt;#&lt;/a&gt; 数据库特性&lt;/h2&gt;
&lt;h3 id=&#34;数据库4个特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库4个特性&#34;&gt;#&lt;/a&gt; 数据库 4 个特性：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Atomicity（&lt;strong&gt;原子性&lt;/strong&gt;）：事务不可分割、不可约简。&lt;/li&gt;
&lt;li&gt;Consistency（&lt;strong&gt;一致性&lt;/strong&gt;）：在事务开始前和事务结束后，&lt;strong&gt;数据库的完整性&lt;/strong&gt;没有被破坏。&lt;/li&gt;
&lt;li&gt;Isolation（&lt;strong&gt;隔离性&lt;/strong&gt;）：数据库允许多个事务同时对数据处理，隔离性可以&lt;strong&gt;防止&lt;/strong&gt;多个事务并发执行时由于交叉执行而&lt;strong&gt;导致数据的不一致&lt;/strong&gt;。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。&lt;/li&gt;
&lt;li&gt;Durability（&lt;strong&gt;持久性&lt;/strong&gt;）：事务处理结束后，对数据的修改就是永久，不会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务隔离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务隔离&#34;&gt;#&lt;/a&gt; 事务隔离&lt;/h2&gt;
&lt;h3 id=&#34;数据库的事务隔离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的事务隔离&#34;&gt;#&lt;/a&gt; 数据库的事务隔离：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;READ-UNCOMMITTED：&lt;strong&gt;未提交读&lt;/strong&gt;，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;READ-COMMITTED：&lt;strong&gt;提交读&lt;/strong&gt;，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPEATABLE-READ：&lt;strong&gt;可重复读&lt;/strong&gt;，&lt;strong&gt;默认&lt;/strong&gt;级别，保证多次读取同一个数据，值和内容一致。禁止读取到别的事务未提交的数据（会造成幻读）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SERIALIZABLE：&lt;strong&gt;序列化&lt;/strong&gt;，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脏读&lt;/strong&gt; ：表示一个事务能够读取另一个事务中还未提交的数据。&lt;strong&gt;不可重复读&lt;/strong&gt; ：是指在一个事务内，多次读同一数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页查询&#34;&gt;#&lt;/a&gt; 分页查询&lt;/h2&gt;
&lt;h3 id=&#34;oracle页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle页查询&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Oracle 页查询&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Oracle 中使用 rownum 来进行分页，&lt;/p&gt;
&lt;p&gt;select * from    ( select rownum r,a from tabName where rownum &amp;lt;= 20 )  where r &amp;gt; 10&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/13/MyBatis/</guid>
            <title>MyBatis</title>
            <link>https://www.baocai-blog.cn/2020/10/13/MyBatis/</link>
            <category>框架</category>
            <pubDate>Tue, 13 Oct 2020 21:17:48 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;mybatis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis&#34;&gt;#&lt;/a&gt; MyBatis&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;h3 id=&#34;什么是mybatis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是mybatis&#34;&gt;#&lt;/a&gt; 什么是 MyBatis&lt;/h3&gt;
&lt;p&gt;MyBatis 是一个可以自定义 SQL、存储过程和高级映射的持久层框架。&lt;/p&gt;
&lt;h3 id=&#34;mybatis优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis优点&#34;&gt;#&lt;/a&gt; MyBatis 优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基于 SQL 语句，灵活&lt;/li&gt;
&lt;li&gt;降低代码量&lt;/li&gt;
&lt;li&gt;与数据库兼容&lt;/li&gt;
&lt;li&gt;与 Spring 集成&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;h3 id=&#34;mybatis缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis缓存&#34;&gt;#&lt;/a&gt; MyBatis 缓存&lt;/h3&gt;
&lt;p&gt;MyBatis 的缓存分为一级缓存和二级存，一级缓存放在 session 里面，默认就有，二级缓 存放在它的命名空间里，默认是不打开的，使用二级缓存属性类需要实现 Serializable 序列化 接口 (可用来保存对象的状态), 可在它的映射文件中配置 &amp;lt; cache/&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;mybatis分页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis分页&#34;&gt;#&lt;/a&gt; MyBatis 分页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分页方式：Mybatis 使用 RowBounds 对象进行分页，也可以直接编写 sql 实现分页，也可以使用 Mybatis 的分页插件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分页插件的原理：实现 Mybatis 提供的接口，实现自定义插件，在插件的拦截方法内拦 截待执行的 sql，然后重写 sql&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;和的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和的区别是什么&#34;&gt;#&lt;/a&gt; #{} 和 ${} 的区别是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;#{} 是预编译处理，${} 是字符串替换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mybatis 在处理 #{} 时，会将 sql 中的 #{} 替换为？号，调用 PreparedStatement 的 set 方法 来赋值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mybatis 在处理&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mtext&gt;时，就是把&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;{}时，就是把&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;就&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;把&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; {} 替换成变量的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 #{} 可以有效的防止 SQL 注入，提高系统安全性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mybatis编程步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis编程步骤&#34;&gt;#&lt;/a&gt; Mybatis 编程步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建 SqlSessionFactory&lt;/li&gt;
&lt;li&gt;通过 SqlSessionFactory 创建 SqlSession&lt;/li&gt;
&lt;li&gt;通过 sqlsession 执行数据库操作&lt;/li&gt;
&lt;li&gt;调用 session.commit () 提交事务&lt;/li&gt;
&lt;li&gt;调用 session.close () 关闭会话&lt;/li&gt;
&lt;/ol&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/13/Spring/</guid>
            <title>Spring</title>
            <link>https://www.baocai-blog.cn/2020/10/13/Spring/</link>
            <category>框架</category>
            <pubDate>Tue, 13 Oct 2020 21:01:03 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt; Spring&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;h3 id=&#34;什么是spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是spring&#34;&gt;#&lt;/a&gt; 什么是 Spring&lt;/h3&gt;
&lt;p&gt;Spring 是个 java 企业级应用的开源开发框架。Spring 框架目标是简化 Java 企业级应用开发，并通过 POJO 为基础的编程模型促进良好的编程习惯。&lt;/p&gt;
&lt;h2 id=&#34;aop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt; AOP&lt;/h2&gt;
&lt;h3 id=&#34;什么是aop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是aop&#34;&gt;#&lt;/a&gt; 什么是 AOP&lt;/h3&gt;
&lt;p&gt;aop 是面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。&lt;/p&gt;
&lt;h2 id=&#34;ioc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ioc&#34;&gt;#&lt;/a&gt; IOC&lt;/h2&gt;
&lt;h3 id=&#34;什么是ioc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是ioc&#34;&gt;#&lt;/a&gt; 什么是 IOC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IOC 容器负责实例化、配置程序中的对象及建立对象间的依赖。&#34;控制反转&#34; 是指 new 实例工作交给 Spring 容器来做。&lt;/li&gt;
&lt;li&gt;所谓 IoC (控制反转)，对于 spring 框架来说，就是由 spring 来负责控制对象的生命周期和对象间的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ioc优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ioc优点&#34;&gt;#&lt;/a&gt; IOC 优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;降低代码量&lt;/li&gt;
&lt;li&gt;易于测试&lt;/li&gt;
&lt;li&gt;轻松实现耦合&lt;/li&gt;
&lt;li&gt;支持饿汉式初始化和懒加载&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#依赖&#34;&gt;#&lt;/a&gt; 依赖&lt;/h2&gt;
&lt;h3 id=&#34;什么是依赖注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是依赖注入&#34;&gt;#&lt;/a&gt; 什么是依赖注入&lt;/h3&gt;
&lt;p&gt;spring 使用 javaBean 对象的 set 方法或者带参数的构造方法为我们在创建所需对象时将其属性自动设置所需要的值的过程，就是依赖注入的思想。&lt;/p&gt;
&lt;h3 id=&#34;依赖注入方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#依赖注入方式&#34;&gt;#&lt;/a&gt; 依赖注入方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;setter 属性注入&lt;/li&gt;
&lt;li&gt;构造方法注入&lt;/li&gt;
&lt;li&gt;接口注入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性&#34;&gt;#&lt;/a&gt; 特性&lt;/h2&gt;
&lt;h3 id=&#34;spring优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring优点&#34;&gt;#&lt;/a&gt; Spring 优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;方便解耦 ——Spring 提供的 IoC 容器实现了对象依赖关系的管理，避免了硬编码导致的耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持 AOP——Spring 提供的 AOP 功能，方便进行面向切面编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集成了多种优秀框架 ——Spring 提供了对各种优秀框架（如 Struts、Hibernate、Hessian、Quartz 等）的直接支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降低对 API 依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/13/SpringMVC/</guid>
            <title>SpringMVC</title>
            <link>https://www.baocai-blog.cn/2020/10/13/SpringMVC/</link>
            <category>框架</category>
            <pubDate>Tue, 13 Oct 2020 20:08:53 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;springmvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springmvc&#34;&gt;#&lt;/a&gt; SpringMVC&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;h3 id=&#34;什么是springmvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是springmvc&#34;&gt;#&lt;/a&gt; 什么是 SpringMVC&lt;/h3&gt;
&lt;p&gt;SpringMvc 是 spring 的一个模块，基于 MVC 的一个框架，无需中间整合层来整合。 简化开发，减少出错。&lt;/p&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性&#34;&gt;#&lt;/a&gt; 特性&lt;/h2&gt;
&lt;h3 id=&#34;springmvc的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springmvc的优点&#34;&gt;#&lt;/a&gt; SpringMVC 的优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;它是基于组件技术的。全部的应用对象，无论控制器和视图，还是业务对象之类的都是 java 组件。并且和 Spring 提供的其他基础结构紧密集成.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不依赖于 Servlet API (目标虽是如此，但是在实现的时候确实是依赖于 Servlet 的)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以任意使用各种视图技术，而不仅仅局限于 JSP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持各种请求资源的映射策略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它应是易于扩展的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作原理&#34;&gt;#&lt;/a&gt; 工作原理&lt;/h2&gt;
&lt;h3 id=&#34;springmvc的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springmvc的工作原理&#34;&gt;#&lt;/a&gt; SpringMVC 的工作原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端发送请求 DispatcherServlet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DispatcherServlet 查询 handlerMapping 找到处理请求的 Controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller 调用业务逻辑后，返回 ModelAndView&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DispatcherServlet 查询 ModelAndView，找到指定视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视图将结果返回到客户端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;springmvc常用注解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springmvc常用注解&#34;&gt;#&lt;/a&gt; SpringMVC 常用注解&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;@requestMapping 用于请求 url 映射。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@RequestBody 注解实现接收 http 请求的 json 数据，将 json 数据转换为 java 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@ResponseBody 注解实现将 controller 方法返回对象转化为 json 响应给客户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见问题&#34;&gt;#&lt;/a&gt; 常见问题&lt;/h2&gt;
&lt;h3 id=&#34;如何解决getpost乱码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决getpost乱码&#34;&gt;#&lt;/a&gt; 如何解决 get/post 乱码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解决 post 请求乱码：我们可以在 web.xml 里边配置一个 CharacterEncodingFilter 过滤器。 设置为 utf-8，解决 get 请求的乱码：有两种方法。&lt;/li&gt;
&lt;li&gt;get 请求中文参数出现乱码解决方法有两个:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改 tomcat 配置文件添加编码与工程编码一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另 外 一 种 方 法 对 参 数 进 行 重 新 编 码 String userName = New String (Request.getParameter (“userName”).getBytes (“ISO8859-1”), “utf-8”);&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
            <title>Java基础语法</title>
            <link>https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
            <category>Java基础</category>
            <pubDate>Sat, 10 Oct 2020 12:45:31 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;java基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础语法&#34;&gt;#&lt;/a&gt; JAVA 基础语法&lt;/h1&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础语法&#34;&gt;#&lt;/a&gt; 基础语法&lt;/h2&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;p&gt;算数运算符、关系运算符、赋值运算符、逻辑运算符、三目运算符&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;h4 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;byte、short、int、long&lt;/li&gt;
&lt;li&gt;float、double、char&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引用数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用数据类型&#34;&gt;#&lt;/a&gt; 引用数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h2&gt;
&lt;h3 id=&#34;if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if&#34;&gt;#&lt;/a&gt; if&lt;/h3&gt;
&lt;p&gt;if 条件结构是根据条件判断之后再做处理&lt;/p&gt;
&lt;h3 id=&#34;switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#switch&#34;&gt;#&lt;/a&gt; switch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;switch (表达式){&lt;/p&gt;
&lt;p&gt;case 取值 1: 语句块 1;break;&lt;br&gt;
case 取值 n: 语句块 n;break; 		&lt;br&gt;
default: 语句块 n+1;break;&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switch 语句有关规则 表达式的返回值必须是下述几种类型之一：int,byte,char,short,String；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 子句中的取值必须是常量，且所有 case 子句中的取值应是不同的；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;while&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while&#34;&gt;#&lt;/a&gt; while&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;while 循环&lt;br&gt;
符合条件，循环继续执行；否则，循环退出&lt;br&gt;
特点：先判断，再执行&lt;/li&gt;
&lt;li&gt;do-while 循环&lt;br&gt;
先执行一遍循环操作，符合条件，循环继续执行；否则，循环退出&lt;br&gt;
特点：先执行，再判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;for&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for&#34;&gt;#&lt;/a&gt; for&lt;/h3&gt;
&lt;p&gt;语法：&lt;br&gt;
for (初始化参数；判断条件；更新循环变量){&lt;br&gt;
循环体；&lt;br&gt;
}&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h2&gt;
&lt;h3 id=&#34;冒泡排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冒泡排序&#34;&gt;#&lt;/a&gt; 冒泡排序&lt;/h3&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/li&gt;
&lt;li&gt;对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二分查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二分查找&#34;&gt;#&lt;/a&gt; 二分查找&lt;/h3&gt;
&lt;p&gt;二分查找也叫折半查找，是一种基本的查找算法，需要待查的表满足两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查找表必须使用顺序的存储结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找表必须按关键字大小有序排列&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法的基本思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将查找表中间位置数据元素的关键字与给定关键字比较，如果相等则查找成功；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则利用中间元素将表一分为二，如果中间关键字大于给定关键字，则在前一子表中进行折半查找，否则在后一子表中进行折半查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复以上过程直到找到满足条件的元素，则查找成功；或直到子表为空为止，此时查找不成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二分查找递归写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public int firstOccurrence (int [] nums,int target){
    int low = 0,high = nums.length - 1;
    while(low &amp;lt;=  high){   
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            return mid;
        }
        if(nums[mid] &amp;lt; target){
            low = mid+1;
        }else {
            high = mid-1;
        }
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
            <title>面向对象</title>
            <link>https://www.baocai-blog.cn/2020/10/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
            <category>面向对象</category>
            <pubDate>Sat, 10 Oct 2020 12:42:25 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;面向对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象&#34;&gt;#&lt;/a&gt; 面向对象&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;h3 id=&#34;类与对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类与对象&#34;&gt;#&lt;/a&gt; 类与对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对象：对象是类的实例&lt;/li&gt;
&lt;li&gt;类：类是一个模板，描述一类对象的行为和状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造方法&#34;&gt;#&lt;/a&gt; 构造方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于对象初始化。&lt;/li&gt;
&lt;li&gt;构造方法的名称必须与类同名，一个类可以有多个构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法重载方法重写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法重载方法重写&#34;&gt;#&lt;/a&gt; 方法重载 / 方法重写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重写：重写是子类对父类的允许访问的方法的实现过程进行重新编写，返回值和形参都不能改变。子类可以根据需要，定义特定于自己的行为。&lt;/li&gt;
&lt;li&gt;重载：重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高级&#34;&gt;#&lt;/a&gt; 高级&lt;/h2&gt;
&lt;h3 id=&#34;final关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final关键字&#34;&gt;#&lt;/a&gt; final 关键字&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;final 修饰的类叫最终类，该类不能被继承。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;final 修饰的方法不能被重写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;抽象类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象类&#34;&gt;#&lt;/a&gt; 抽象类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;抽象类不能被实例化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h3&gt;
&lt;p&gt;接口是抽象方法的集合&lt;br&gt;
定义格式：&lt;br&gt;
interface 接口名称 { &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;
全局常量；&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;
抽象方法；&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
 接口和抽象类的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;抽象类要被子类继承，接口要被类实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口只能声明抽象方法，抽象类中可以声明抽象方法，也可以写非抽象方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类使用继承来使用，无法多继承。接口使用实现来使用，可以多实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类中可以包含 static 方法 ，但是接口中不允许（静态方法不能被子类重写，因此接口中不能声明 静态方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口不能有构造方法，但是抽象类可以有&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;equals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#equals&#34;&gt;#&lt;/a&gt; equals&lt;/h3&gt;
&lt;h3 id=&#34;内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内部类&#34;&gt;#&lt;/a&gt; 内部类&lt;/h3&gt;
&lt;h4 id=&#34;成员内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成员内部类&#34;&gt;#&lt;/a&gt; 成员内部类&lt;/h4&gt;
&lt;p&gt;成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Outer { &amp;nbsp; &amp;nbsp;
	private double x = 0; &amp;nbsp; &amp;nbsp;
	public Outer(double x) { 
	this.x = x; 
    } &amp;nbsp; &amp;nbsp;  &amp;nbsp; &amp;nbsp;
class Inner { &amp;nbsp; //内部类 &amp;nbsp; &amp;nbsp; &amp;nbsp;
	public void say() {
    	System.out.println(&#34;x=&#34;+x);&amp;nbsp;  
    } &amp;nbsp;
} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特点： 成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括 private 成员和静态成员）。&lt;/p&gt;
&lt;h4 id=&#34;局部内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局部内部类&#34;&gt;#&lt;/a&gt; 局部内部类&lt;/h4&gt;
&lt;p&gt;局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限 于方法内或者该作用域内。&lt;br&gt;
例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	class Person{ &amp;nbsp;  
		public Person() {
		}  
    }&amp;nbsp;  
    class Man{ &amp;nbsp; &amp;nbsp; &amp;nbsp;  
    	public Man(){
 &amp;nbsp; &amp;nbsp; &amp;nbsp;  }
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;public People getPerson(){         
        	class Student extends People{        
        	  //局部内部类 
       		  int age =0; &amp;nbsp;  
       		} &amp;nbsp;      
        return new Student(); &amp;nbsp;   
        }   
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;匿名内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匿名内部类&#34;&gt;#&lt;/a&gt; 匿名内部类&lt;/h4&gt;
&lt;p&gt;new 父类构造器（参数列表）| 实现接口（） { &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;
// 匿名内部类的类体部分&lt;br&gt;
}&lt;/p&gt;
&lt;h4 id=&#34;静态内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态内部类&#34;&gt;#&lt;/a&gt; 静态内部类&lt;/h4&gt;
&lt;p&gt;静态内部类是不需要依赖于外部类对象的，并且它不能使用外部类的非 static 成员变量或者方法.&lt;br&gt;
 格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Test { &amp;nbsp; 
	public static void main(String[] args)  { &amp;nbsp; &amp;nbsp; &amp;nbsp; 
		Outter.Inner inner = new Outter.Inner(); &amp;nbsp; 
	} 
}
 
class Outter { &amp;nbsp; &amp;nbsp;
	public Outter() { &amp;nbsp;
  	} &amp;nbsp; &amp;nbsp;  &amp;nbsp; &amp;nbsp;
static class Inner { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
	public Inner() { &amp;nbsp; &amp;nbsp; &amp;nbsp; 
    } &amp;nbsp; 
} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进阶&#34;&gt;#&lt;/a&gt; 进阶&lt;/h2&gt;
&lt;h3 id=&#34;封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装&#34;&gt;#&lt;/a&gt; 封装&lt;/h3&gt;
&lt;p&gt;private 修饰变量&lt;br&gt;
 Getter/Setter&lt;/p&gt;
&lt;h3 id=&#34;this&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this&#34;&gt;#&lt;/a&gt; this&lt;/h3&gt;
&lt;p&gt;使用 this 关键字可以完成以下的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用类中的属性&lt;/li&gt;
&lt;li&gt;调用类中的方法或构造方法&lt;/li&gt;
&lt;li&gt;表示当前对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static&#34;&gt;#&lt;/a&gt; static&lt;/h3&gt;
&lt;p&gt;static 表示 “静态” 的意思，可以用来修饰成员变量和成员方法&lt;br&gt;
重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态成员 在类加载时加载并初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论一个类存在多少个对象，静态的属性，永远在内存中只有一份&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在访问时： 静态不能访问非静态，非静态可以访问静态！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h2&gt;
&lt;h3 id=&#34;try-catch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#try-catch&#34;&gt;#&lt;/a&gt; try&amp;nbsp; catch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;异常指的是 Exception，Exception 类，在 Java 中存在一个父 Throwable（可能的抛出）&lt;/li&gt;
&lt;li&gt;Throwable 存在两个子类：
&lt;ol&gt;
&lt;li&gt;Error：表示的是错误，是 JVM 发出的错误操作，只能尽量避免，无法用代码处理。&lt;/li&gt;
&lt;li&gt;Exception：一般表示所有程序中的错误，所以一般在程序中将进行 try…catch 的处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throwthrows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#throwthrows&#34;&gt;#&lt;/a&gt; throw/throws&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;throws 关键字：&lt;br&gt;
此关键字主要在方法的声明上使 用，表示方法中不处理异常，而交给调用处处理。&lt;br&gt;
格式：&lt;br&gt;
返回值 方法名称 () throws Exception {&lt;br&gt;
}&lt;/li&gt;
&lt;li&gt;throw 关键字&lt;br&gt;
 throw 关键字表示在程序中人为的抛出一个异常，因为从异常处理机制来看，所有的异常一旦产生之后，实际上抛出 的就是一个异常类的实例化对象，那么此对象也可以由 throw 直接抛出。&lt;br&gt;
代码： throw new Exception (&#34;抛着玩的。&#34;) ;&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
