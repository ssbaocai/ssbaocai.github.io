{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"javaweb\" category",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/10/04/JavaWeb/",
            "url": "https://www.baocai-blog.cn/2020/10/04/JavaWeb/",
            "title": "JavaWeb",
            "date_published": "2020-10-04T06:58:46.799Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"说下原生jdbc操作数据库流程\"><a class=\"anchor\" href=\"#说下原生jdbc操作数据库流程\">#</a> 说下原生 jdbc 操作数据库流程？</h3>\n<ul>\n<li>第一步：Class.forName () 加载数据库连接驱动；</li>\n<li>第二步：DriverManager.getConnection () 获取数据连接对象；</li>\n<li>第三步：根据 SQL 获取 sql 会话对象，有 2 种方式 Statement、PreparedStatement ;</li>\n<li>第四步：执行 SQL 处理结果集，执行 SQL 前如果有参数值就设置参数值 setXXX ();</li>\n<li>第五步：关闭结果集、关闭会话、关闭连接。<br>\n详细代码请看（封装）：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjk1NDI2MTEvYXJ0aWNsZS9kZXRhaWxzLzUyNDI2MDA2\">http://blog.csdn.net/qq_29542611/article/details/52426006</span></li>\n</ul>\n<h3 id=\"session-和-cookie-有什么区别\"><a class=\"anchor\" href=\"#session-和-cookie-有什么区别\">#</a> session 和 cookie 有什么区别？</h3>\n<ul>\n<li>存储位置不同：session 存储在服务器端；cookie 存储在浏览器端。</li>\n<li>安全性不同：cookie 安全性一般，在浏览器存储，可以被伪造和修改。</li>\n<li>容量和个数限制：cookie 有容量限制，每个站点下的 cookie 也有个数限制。</li>\n<li>存储的多样性：session 可以存储在 Redis 中、数据库中、应用程序中；而 cookie 只能存储在浏览器中。</li>\n</ul>\n<h3 id=\"简述-tcp-和-udp的区别\"><a class=\"anchor\" href=\"#简述-tcp-和-udp的区别\">#</a> 简述 tcp 和 udp 的区别？</h3>\n<p><strong>tcp</strong> 和 <strong>udp</strong> 是 OSI 模型中的运输层中的协议。</p>\n<p><strong>tcp</strong> 提供可靠的通信传输    <strong>udp</strong> 则常被用于让广播和细节控制交给应用的通信传输。</p>\n<p>两者的区别大致如下：</p>\n<ul>\n<li>tcp <strong>面向连接</strong>，udp <strong>面向非连接</strong>即发送数据前不需要建立链接；</li>\n<li>tcp 提供可靠的服务（数据传输），udp 无法保证；</li>\n<li>tcp 面向字节流，udp 面向报文；</li>\n<li>tcp 数据传输慢，udp 数据传输快；</li>\n</ul>\n<h3 id=\"tcp三次握手\"><a class=\"anchor\" href=\"#tcp三次握手\">#</a> tcp 三次握手</h3>\n<p>第一次</p>\n<p>第一次握手：建立连接时，客户端  发送<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=\"> syn</span> 包（seq=j）到  服务器，并进入 SYN_SENT 状态，等待  服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 [3]</p>\n<p>第二次</p>\n<p>第二次握手：服务器  收到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=\"> syn</span> 包，必须确认  客户端  的 SYN（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=\">ack</span>=j+1），同时自己也发送一个 SYN 包（seq=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。 [3]</p>\n<p>第三次</p>\n<p>第三次握手：客户端  收到  服务器  的 SYN+ACK 包，向  服务器  发送确认包 ACK (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=\">ack</span>=k+1），此包发送完毕，客户端和服务器进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9FU1RBQkxJU0hFRA==\"> ESTABLISHED</span>（TCP 连接成功）状态，完成三次握手。</p>\n<h3 id=\"为什么要三次握手两次不行吗为什么\"><a class=\"anchor\" href=\"#为什么要三次握手两次不行吗为什么\">#</a> 为什么要三次握手，两次不行吗？为什么？</h3>\n<p>如果采用两次握手，那么只要<strong>服务器</strong>发出确认数据包就会建立连接，但由于<strong>客户端</strong>此时并未响应服务器端的请求，那此时<strong>服务器端</strong>就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。</p>\n<p>若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "JavaWeb"
            ]
        }
    ]
}