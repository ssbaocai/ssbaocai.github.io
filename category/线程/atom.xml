<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.baocai-blog.cn</id>
    <title>手撕包菜 • Posts by &#34;线程&#34; category</title>
    <link href="https://www.baocai-blog.cn" />
    <updated>2020-10-04T06:58:46.815Z</updated>
    <category term="MyBatis" />
    <category term="Spring" />
    <category term="JavaWeb" />
    <category term="MySQL" />
    <category term="容器" />
    <category term="多线程" />
    <category term="设计模式" />
    <category term="Java" />
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
        <title>多线程</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;并行和并发有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并行和并发有什么区别&#34;&gt;#&lt;/a&gt; 并行和并发有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;并行：多个处理器或多核处理器同时处理多个任务。&lt;/li&gt;
&lt;li&gt;并发：多个任务在同一个 CPU     核上，按细分的时间片轮流 (交替) 执行，从逻辑上来看那些任务是同时执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;img data-src=&#34;C:%5CUsers%5CYangMiemie%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201004132903253.png&#34; alt=&#34;image-20201004132903253&#34;&gt;&lt;/p&gt;
&lt;p&gt;​				并发 = 两个队列和一台咖啡机。&lt;/p&gt;
&lt;p&gt;​				并行 = 两个队列和两台咖啡机。&lt;/p&gt;
&lt;h4 id=&#34;创建线程有哪几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建线程有哪几种方式&#34;&gt;#&lt;/a&gt; 创建线程有哪几种方式？&lt;/h4&gt;
&lt;p&gt;创建线程有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承 Thread 重写 run 方法；&lt;/li&gt;
&lt;li&gt;实现 Runnable 接口；&lt;/li&gt;
&lt;li&gt;实现 Callable 接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;说一下-runnable-和-callable-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说一下-runnable-和-callable-有什么区别&#34;&gt;#&lt;/a&gt; 说一下 runnable 和 callable 有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Runnable 接口 run 方法无返回值；Callable 接口 call 方法有返回值，支持泛型&lt;/li&gt;
&lt;li&gt;Runnable 接口 run 方法只能抛出运行时异常，且无法捕获处理；Callable 接口 call 方法允许抛出异常，可以获取异常信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-线程状态有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java-线程状态有哪些&#34;&gt;#&lt;/a&gt; Java 线程状态有哪些？&lt;/h4&gt;
&lt;p&gt;线程状态有 5 种，新建，就绪，运行，阻塞，死亡。&lt;/p&gt;
&lt;h4 id=&#34;sleep-和-wait-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sleep-和-wait-有什么区别&#34;&gt;#&lt;/a&gt; sleep () 和 wait () 有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类的不同：sleep () 来自 Thread，wait () 来自 Object。&lt;/li&gt;
&lt;li&gt;释放锁：sleep () 不释放锁；wait () 释放锁。&lt;/li&gt;
&lt;li&gt;用法不同：sleep () 时间到会自动恢复；wait () 可以使用 notify ()/notifyAll () 直接唤醒。&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="多线程" />
        <updated>2020-10-04T06:58:46.815Z</updated>
    </entry>
</feed>
