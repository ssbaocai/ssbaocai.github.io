<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.baocai-blog.cn</id>
    <title>手撕包菜 • Posts by &#34;mysql&#34; category</title>
    <link href="https://www.baocai-blog.cn" />
    <updated>2020-11-14T08:40:27.178Z</updated>
    <category term="Java基础" />
    <category term="框架" />
    <category term="数据库" />
    <category term="面向对象" />
    <category term="XML，JSON" />
    <category term="html" />
    <category term="Java应用" />
    <entry>
        <id>https://www.baocai-blog.cn/2020/11/14/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</id>
        <title>MySql基础笔记</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/11/14/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;数据库的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的基本概念&#34;&gt;#&lt;/a&gt; 数据库的基本概念&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 数据库的英文单词： DataBase 简称 ： DB
2. 什么数据库？
	* 用于存储和管理数据的仓库。

3. 数据库的特点：
	1. 持久化存储数据的。其实数据库就是一个文件系统
	2. 方便存储和管理数据
	3. 使用了统一的方式操作数据库 -- SQL
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mysql数据库软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql数据库软件&#34;&gt;#&lt;/a&gt; MySQL 数据库软件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 安装

2. 卸载
	1. 去mysql的安装目录找到my.ini文件
		* 复制 datadir=&#34;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&#34;
	2. 卸载MySQL
	3. 删除C:/ProgramData目录下的MySQL文件夹。
	
3. 配置
	* MySQL服务启动
		1. 手动。
		2. cmd--&amp;gt; services.msc 打开服务的窗口
		3. 使用管理员打开cmd
			* net start mysql : 启动mysql的服务
			* net stop mysql:关闭mysql服务
	* MySQL登录
		1. mysql -uroot -p密码
		2. mysql -hip -uroot -p连接目标的密码
		3. mysql --host=ip --user=root --password=连接目标的密码
	* MySQL退出
		1. exit
		2. quit

	* MySQL目录结构
		1. MySQL安装目录：basedir=&#34;D:/develop/MySQL/&#34;
			* 配置文件 my.ini
		2. MySQL数据目录：datadir=&#34;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&#34;
			* 几个概念
				* 数据库：文件夹
				* 表：文件
				* 数据：数据
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql&#34;&gt;#&lt;/a&gt; SQL&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1.什么是SQL？
	Structured Query Language：结构化查询语言
	其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。
	
2.SQL通用语法
	1. SQL 语句可以单行或多行书写，以分号结尾。
	2. 可使用空格和缩进来增强语句的可读性。
	3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。
	4. 3 种注释
		* 单行注释: -- 注释内容 或 # 注释内容(mysql 特有) 
		* 多行注释: /* 注释 */
	
3. SQL分类
	1) DDL(Data Definition Language)数据定义语言
		用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等
	2) DML(Data Manipulation Language)数据操作语言
		用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等
	3) DQL(Data Query Language)数据查询语言
		用来查询数据库中表的记录(数据)。关键字：select, where 等
	4) DCL(Data Control Language)数据控制语言(了解)
		用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ddl操作数据库-表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ddl操作数据库-表&#34;&gt;#&lt;/a&gt; DDL: 操作数据库、表&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 操作数据库：CRUD
	1. C(Create):创建
		* 创建数据库：
			* create database 数据库名称;
		* 创建数据库，判断不存在，再创建：
			* create database if not exists 数据库名称;
		* 创建数据库，并指定字符集
			* create database 数据库名称 character set 字符集名;

		* 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk
			* create database if not exists db4 character set gbk;
	2. R(Retrieve)：查询
		* 查询所有数据库的名称:
			* show databases;
		* 查询某个数据库的字符集:查询某个数据库的创建语句
			* show create database 数据库名称;
	3. U(Update):修改
		* 修改数据库的字符集
			* alter database 数据库名称 character set 字符集名称;
	4. D(Delete):删除
		* 删除数据库
			* drop database 数据库名称;
		* 判断数据库存在，存在再删除
			* drop database if exists 数据库名称;
	5. 使用数据库
		* 查询当前正在使用的数据库名称
			* select database();
		* 使用数据库
			* use 数据库名称;


2. 操作表
	1. C(Create):创建
		1. 语法：
			create table 表名(
				列名1 数据类型1,
				列名2 数据类型2,
				....
				列名n 数据类型n
			);
			* 注意：最后一列，不需要加逗号（,）
			* 数据库类型：
				1. int：整数类型
					* age int,
				2. double:小数类型
					* score double(5,2)
				3. date:日期，只包含年月日，yyyy-MM-dd
				4. datetime:日期，包含年月日时分秒	 yyyy-MM-dd HH:mm:ss
				5. timestamp:时间错类型	包含年月日时分秒	 yyyy-MM-dd HH:mm:ss	
					* 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值

				6. varchar：字符串
					* name varchar(20):姓名最大20个字符
					* zhangsan 8个字符  张三 2个字符


		* 创建表
			create table student(
				id int,
				name varchar(32),
				age int ,
				score double(4,1),
				birthday date,
				insert_time timestamp
			);
		* 复制表：
			* create table 表名 like 被复制的表名;	  	
	2. R(Retrieve)：查询
		* 查询某个数据库中所有的表名称
			* show tables;
		* 查询表结构
			* desc 表名;
	3. U(Update):修改
		1. 修改表名
			alter table 表名 rename to 新的表名;
		2. 修改表的字符集
			alter table 表名 character set 字符集名称;
		3. 添加一列
			alter table 表名 add 列名 数据类型;
		4. 修改列名称 类型
			alter table 表名 change 列名 新列别 新数据类型;
			alter table 表名 modify 列名 新数据类型;
		5. 删除列
			alter table 表名 drop 列名;
	4. D(Delete):删除
		* drop table 表名;
		* drop table  if exists 表名 ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dml增删改表中数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dml增删改表中数据&#34;&gt;#&lt;/a&gt; DML：增删改表中数据&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 添加数据：
	* 语法：
		* insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);
	* 注意：
		1. 列名和值要一一对应。
		2. 如果表名后，不定义列名，则默认给所有列添加值
			insert into 表名 values(值1,值2,...值n);
		3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来
2. 删除数据：
	* 语法：
		* delete from 表名 [where 条件]
	* 注意：
		1. 如果不加条件，则删除表中所有记录。
		2. 如果要删除所有记录
			1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作
			2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。
3. 修改数据：
	* 语法：
		* update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];

	* 注意：
		1. 如果不加任何条件，则会将表中所有记录全部修改。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dql查询表中的记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dql查询表中的记录&#34;&gt;#&lt;/a&gt; DQL：查询表中的记录&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;* select * from 表名;

1. 语法：
	select
		字段列表
	from
		表名列表
	where
		条件列表
	group by
		分组字段
	having
		分组之后的条件
	order by
		排序
	limit
		分页限定


2. 基础查询
	1. 多个字段的查询
		select 字段名1，字段名2... from 表名；
		* 注意：
			* 如果查询所有字段，则可以使用*来替代字段列表。
	2. 去除重复：
		* distinct
	3. 起别名：
		* as：as也可以省略


3. 条件查询
	1. where子句后跟条件
	2. 运算符
		* &amp;gt; 、&amp;lt; 、&amp;lt;= 、&amp;gt;= 、= 、&amp;lt;&amp;gt;
		* BETWEEN...AND  
		* IN( 集合) 
		* LIKE：模糊查询
			* 占位符：
				* _:单个任意字符
				* %：多个任意字符
		* IS NULL  
		* and  或 &amp;amp;&amp;amp;
		* or  或 || 
		* not  或 !
		
			-- 查询年龄大于20岁

			SELECT * FROM student WHERE age &amp;gt; 20;
			
			SELECT * FROM student WHERE age &amp;gt;= 20;
			
			-- 查询年龄等于20岁
			SELECT * FROM student WHERE age = 20;
			
			-- 查询年龄不等于20岁
			SELECT * FROM student WHERE age != 20;
			SELECT * FROM student WHERE age &amp;lt;&amp;gt; 20;
			
			-- 查询年龄大于等于20 小于等于30
			
			SELECT * FROM student WHERE age &amp;gt;= 20 &amp;amp;&amp;amp;  age &amp;lt;=30;
			SELECT * FROM student WHERE age &amp;gt;= 20 AND  age &amp;lt;=30;
			SELECT * FROM student WHERE age BETWEEN 20 AND 30;
			
			-- 查询年龄22岁，18岁，25岁的信息
			SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25
			SELECT * FROM student WHERE age IN (22,18,25);
			
			-- 查询英语成绩为null
			SELECT * FROM student WHERE english = NULL; 
			-- 不对的。null值不能使用 = （!=） 判断
			
			SELECT * FROM student WHERE english IS NULL;
			
			-- 查询英语成绩不为null
			SELECT * FROM student WHERE english  IS NOT NULL;



			-- 查询姓马的有哪些？ like
			SELECT * FROM student WHERE NAME LIKE &#39;马%&#39;;
			-- 查询姓名第二个字是化的人
			
			SELECT * FROM student WHERE NAME LIKE &#34;_化%&#34;;
			
			-- 查询姓名是3个字的人
			SELECT * FROM student WHERE NAME LIKE &#39;___&#39;;
			-- 查询姓名中包含德的人
			SELECT * FROM student WHERE NAME LIKE &#39;%德%&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="数据库" />
        <updated>2020-11-14T08:40:27.178Z</updated>
    </entry>
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/13/MySQL/</id>
        <title>MySQL</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/13/MySQL/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;h3 id=&#34;数据库的三范式是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的三范式是什么&#34;&gt;#&lt;/a&gt; 数据库的三范式是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一范式：强调的是原子性，即数据库表的每一列都是不可分割的原子数据项。&lt;/li&gt;
&lt;li&gt;第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。&lt;/li&gt;
&lt;li&gt;第三范式：任何非主属性不依赖于其它非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql-的内连接-左连接-右连接有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-的内连接-左连接-右连接有什么区别&#34;&gt;#&lt;/a&gt; MySQL 的内连接、左连接、右连接有什么区别？&lt;/h3&gt;
&lt;p&gt;内连接关键字：inner join；左连接：left join；右连接：right join。&lt;/p&gt;
&lt;p&gt;内连接是把匹配的关联数 据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。&lt;/p&gt;
&lt;h3 id=&#34;数据库基本操作语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库基本操作语句&#34;&gt;#&lt;/a&gt; 数据库基本操作语句&lt;/h3&gt;
&lt;p&gt;主键约束 (primary key)  唯一约束 (unique) 非空约束 (not null) 外键约束 (foreign key)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;select&lt;/strong&gt; ... from 表名  where 条件  group by  分组字段  having 条件  order by  排序字段 ase|desc&lt;/p&gt;
&lt;p&gt;去重操作&lt;strong&gt; distinct&lt;/strong&gt;             select distinct 字段名，字段名 2 from 表名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;insert  into  &amp;lt;表名&amp;gt;  [列名]  values  &amp;lt; 列值 &amp;gt;                delete  from  &amp;lt; 表名 &amp;gt;  where  &amp;lt; 删除条件 &amp;gt;&lt;/strong&gt;**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update 表名 set  字段名 = 字段值，字段名 = 字段值   [where 修改条件];&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库特性&#34;&gt;#&lt;/a&gt; 数据库特性&lt;/h2&gt;
&lt;h3 id=&#34;数据库4个特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库4个特性&#34;&gt;#&lt;/a&gt; 数据库 4 个特性：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Atomicity（&lt;strong&gt;原子性&lt;/strong&gt;）：事务不可分割、不可约简。&lt;/li&gt;
&lt;li&gt;Consistency（&lt;strong&gt;一致性&lt;/strong&gt;）：在事务开始前和事务结束后，&lt;strong&gt;数据库的完整性&lt;/strong&gt;没有被破坏。&lt;/li&gt;
&lt;li&gt;Isolation（&lt;strong&gt;隔离性&lt;/strong&gt;）：数据库允许多个事务同时对数据处理，隔离性可以&lt;strong&gt;防止&lt;/strong&gt;多个事务并发执行时由于交叉执行而&lt;strong&gt;导致数据的不一致&lt;/strong&gt;。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。&lt;/li&gt;
&lt;li&gt;Durability（&lt;strong&gt;持久性&lt;/strong&gt;）：事务处理结束后，对数据的修改就是永久，不会丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务隔离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务隔离&#34;&gt;#&lt;/a&gt; 事务隔离&lt;/h2&gt;
&lt;h3 id=&#34;数据库的事务隔离&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的事务隔离&#34;&gt;#&lt;/a&gt; 数据库的事务隔离：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;READ-UNCOMMITTED：&lt;strong&gt;未提交读&lt;/strong&gt;，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;READ-COMMITTED：&lt;strong&gt;提交读&lt;/strong&gt;，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPEATABLE-READ：&lt;strong&gt;可重复读&lt;/strong&gt;，&lt;strong&gt;默认&lt;/strong&gt;级别，保证多次读取同一个数据，值和内容一致。禁止读取到别的事务未提交的数据（会造成幻读）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SERIALIZABLE：&lt;strong&gt;序列化&lt;/strong&gt;，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脏读&lt;/strong&gt; ：表示一个事务能够读取另一个事务中还未提交的数据。&lt;strong&gt;不可重复读&lt;/strong&gt; ：是指在一个事务内，多次读同一数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页查询&#34;&gt;#&lt;/a&gt; 分页查询&lt;/h2&gt;
&lt;h3 id=&#34;oracle页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle页查询&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Oracle 页查询&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Oracle 中使用 rownum 来进行分页，&lt;/p&gt;
&lt;p&gt;select * from    ( select rownum r,a from tabName where rownum &amp;lt;= 20 )  where r &amp;gt; 10&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="数据库" />
        <updated>2020-10-13T13:43:55.195Z</updated>
    </entry>
</feed>
