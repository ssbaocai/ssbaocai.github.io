<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.baocai-blog.cn</id>
    <title>手撕包菜 • Posts by &#34;java&#34; category</title>
    <link href="https://www.baocai-blog.cn" />
    <updated>2020-11-08T07:10:22.463Z</updated>
    <category term="Java基础" />
    <category term="框架" />
    <category term="数据库" />
    <category term="面向对象" />
    <category term="XML，JSON" />
    <category term="html" />
    <category term="Java应用" />
    <entry>
        <id>https://www.baocai-blog.cn/2020/11/08/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</id>
        <title>Java中的常用算法</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/11/08/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;java中的常用算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java中的常用算法&#34;&gt;#&lt;/a&gt; Java 中的常用算法&lt;/h1&gt;
&lt;h2 id=&#34;冒泡排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冒泡排序&#34;&gt;#&lt;/a&gt; 冒泡排序&lt;/h2&gt;
&lt;p&gt;冒泡排序算法是把较小的元素往前调或者把较大的元素往后调。这种方法主要是通过对相邻两个元素进行大小的比较，根据比较结果和算法规则对该二元素的位置进行交换，这样逐个依次进行比较和交换，就能达到排序目的。&lt;br&gt;
&amp;lt;img src=&#34;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE2MzcwODE4Ni0xNzAzNjAxNDQ4LmdpZg==&#34;&gt;https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531163708186-1703601448.gif&lt;/span&gt;&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过每一次遍历获取最大 / 最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将最大值 / 最小值放在尾部 / 头部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后除开最大值 / 最小值，剩下的数据在进行遍历获取最大 / 最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
   int arr[] = {8, 5, 3, 2, 4};
    //冒泡
    for (int i = 0; i &amp;lt; arr.length; i++) {
        //外层循环，遍历次数
        for (int j = 0; j &amp;lt; arr.length - i - 1; j++) {
            //内层循环，升序（如果前一个值比后一个值大，则交换）
            //内层循环一次，获取一个最大值
            if (arr[j] &amp;gt; arr[j + 1]) {
                int temp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = temp;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序过程（红色：移动的数据）&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&#34;D:\Program Files\blog\hexo\source\images\maopao.jpg&#34; alt=&#34;alt&#34; style=&#34;zoom: 80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;选择排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择排序&#34;&gt;#&lt;/a&gt; 选择排序&lt;/h2&gt;
&lt;p&gt;选择排序算法的基本思路是为每一个位置选择当前最小的元素。选择排序的基本思想是，基于直接选择排序和堆排序这两种基本的简单排序方法。首先从第 1 个位置开始对全部元素进行选择，选出全部元素中最小的给该位置，再对第 2 个位置进行选择，在剩余元素中选择最小的给该位置即可；&lt;br&gt;
&amp;lt;img src=&#34;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3MDIwNTgyMS0xOTgzNjc4NjQzLmdpZg==&#34;&gt;https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531170205821-1983678643.gif&lt;/span&gt;&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将第一个值看成最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后和后续的比较找出最小值和下标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交换本次遍历的起始值和最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明：每次遍历的时候，将前面找出的最小值，看成一个有序的列表，后面的看成无序的列表，然后每次遍历无序列表找出最小值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
   int arr[] = {6, 5, 3, 2, 4};
    //选择
    for (int i = 0; i &amp;lt; arr.length; i++) {
        //默认第一个是最小的。
        int min = arr[i];
        //记录最小的下标
        int index = i;
        //通过与后面的数据进行比较得出，最小值和下标
        for (int j = i + 1; j &amp;lt; arr.length; j++) {
            if (min &amp;gt; arr[j]) {
                min = arr[j];
                index = j;
            }
        }
        //然后将最小值与本次循环的，开始值交换
        int temp = arr[i];
        arr[i] = min;
        arr[index] = temp;
        //说明：将i前面的数据看成一个排好的队列，i后面的看成一个无序队列。
        //每次只需要找无需的最小值，做替换
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序过程（红色：移动的数据）&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&#34;D:\Program Files\blog\hexo\source\images\xuanze.jpg&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;插入排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入排序&#34;&gt;#&lt;/a&gt; 插入排序&lt;/h2&gt;
&lt;p&gt;插入排序算法是基于某序列已经有序排列的情况下，通过一次插入一个元素的方式按照原有排序方式增加元素。&lt;br&gt;
&amp;lt;img src=&#34;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3MDk1MzI4My0xODA2MTUzMzMxLmdpZg==&#34;&gt;https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531170953283-1806153331.gif&lt;/span&gt;&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认从第二个数据开始比较。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果第二个数据比第一个小，则交换。然后在用第三个数据比较，如果比前面小，则插入（狡猾）。否则，退出循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明：默认将第一数据看成有序列表，后面无序的列表循环每一个数据，如果比前面的数据小则插入（交换）。否则退出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
 int arr[] = {7, 5, 3, 2, 4};

//插入排序
for (int i = 1; i &amp;lt; arr.length; i++) {
    //外层循环，从第二个开始比较
    for (int j = i; j &amp;gt; 0; j--) {
        //内存循环，与前面排好序的数据比较，
        //如果后面的数据小于前面的则交换
        if (arr[j] &amp;lt; arr[j - 1]) {
            int temp = arr[j - 1];
            arr[j - 1] = arr[j];
            arr[j] = temp;
        } else {
            //如果不小于，说明插入完毕，退出内层循环
            break;
        }
    }
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序过程（红色：有序，黑色：无序）&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&#34;D:\Program Files\blog\hexo\source\images\charu.jpg&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;快速排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速排序&#34;&gt;#&lt;/a&gt; 快速排序&lt;/h2&gt;
&lt;p&gt;快速排序的基本思想是：通过一趟排序算法把所需要排序的序列的元素分割成两大块，其中，一部分的元素都要小于或等于另外一部分的序列元素，然后仍根据该种方法对划分后的这两块序列的元素分别再次实行快速排序算法，排序实现的整个过程可以是递归的来进行调用，最终能够实现将所需排序的无序序列元素变为一个有序的序列。&lt;br&gt;
&amp;lt;img src=&#34;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3NTcwOTUxNS0xNjk2MDI2MjkuZ2lm&#34;&gt;https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531175709515-169602629.gif&lt;/span&gt;&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确认列表第一个数据为中间值，第一个值看成空缺（低指针空缺）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后在剩下的队列中，看成有左右两个指针（高低）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始高指针向左移动，如果遇到小于中间值的数据，则将这个数据赋值到低指针空缺，并且将高指针的数据看成空缺值（高指针空缺）。然后先向右移动一下低指针，并且切换低指针移动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当低指针移动到大于中间值的时候，赋值到高指针空缺的地方。然后先高指针向左移动，并且切换高指针移动。重复 c、d 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直到高指针和低指针相等时退出，并且将中间值赋值给对应指针位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后将中间值的左右两边看成行的列表，进行快速排序操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {

    int arr[] = {7, 5, 3, 2, 4, 1, 8, 9, 6};

    //快速排序
    int low = 0;
    int high = arr.length - 1;
    quickSort(arr, low, high);  
}

public static void quickSort(int[] arr, int low, int high) {
    //如果指针在同一位置(只有一个数据时)，退出
    if (high - low &amp;lt; 1) {
        return;
    }
    //标记，从高指针开始，还是低指针（默认高指针）
    boolean flag = true;
    //记录指针的其实位置
    int start = low;
    int end = high;
    //默认中间值为低指针的第一个值
    int midValue = arr[low];
    while (true) {
        //高指针移动
        if (flag) {
            //如果列表右方的数据大于中间值，则向左移动
            if (arr[high] &amp;gt; midValue) {
                high--;
            } else if (arr[high] &amp;lt; midValue) {
                //如果小于，则覆盖最开始的低指针值，并且移动低指针，
                //标志位改成从低指针开始移动
                arr[low] = arr[high];
                low++;
                flag = false;
            }
        } else {
            //如果低指针数据小于中间值，则低指针向右移动
            if (arr[low] &amp;lt; midValue) {
                low++;
            } else if (arr[low] &amp;gt; midValue) {
            	//如果低指针的值大于中间值，则覆盖高指针停留时的数据，
            	//并向左移动高指针。切换为高指针移动
                arr[high] = arr[low];
                high--;
                flag = true;
            }
        }
        //当两个指针的位置相同时，则找到了中间值的位置，并退出循环
        if (low == high) {
            arr[low] = midValue;
            break;
        }
    }
    //然后出现有，中间值左边的小于中间值。右边的大于中间值。
    //然后在对左右两边的列表在进行快速排序
    quickSort(arr, start, low -1);
    quickSort(arr, low + 1, end);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序过程 (橙色：中间值，蓝色：确认位置的数据，红色：移动的数据)&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&#34;D:\Program Files\blog\hexo\source\images\kuaisu.jpg&#34; alt=&#34;alt&#34; style=&#34;zoom:80%;&#34; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;转载出处：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGw0MDk1NDYyOTcvcC8xMDk1Njk2MC5odG1s&#34;&gt;https://www.cnblogs.com/ll409546297/p/10956960.html&lt;/span&gt;&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="Java应用" />
        <updated>2020-11-08T07:10:22.463Z</updated>
    </entry>
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/13/JavaWeb/</id>
        <title>JavaWeb</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/13/JavaWeb/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;javaweb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javaweb&#34;&gt;#&lt;/a&gt; JavaWeb&lt;/h1&gt;
&lt;h3 id=&#34;说下原生jdbc操作数据库流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说下原生jdbc操作数据库流程&#34;&gt;#&lt;/a&gt; 说下原生 jdbc 操作数据库流程？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一步：Class.forName () 加载数据库连接驱动；&lt;/li&gt;
&lt;li&gt;第二步：DriverManager.getConnection () 获取数据连接对象；&lt;/li&gt;
&lt;li&gt;第三步：根据 SQL 获取 sql 会话对象，有 2 种方式 Statement、PreparedStatement ;&lt;/li&gt;
&lt;li&gt;第四步：执行 SQL 处理结果集，执行 SQL 前如果有参数值就设置参数值 setXXX ();&lt;/li&gt;
&lt;li&gt;第五步：关闭结果集、关闭会话、关闭连接。&lt;br&gt;
详细代码请看（封装）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjk1NDI2MTEvYXJ0aWNsZS9kZXRhaWxzLzUyNDI2MDA2&#34;&gt;http://blog.csdn.net/qq_29542611/article/details/52426006&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;session-和-cookie-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session-和-cookie-有什么区别&#34;&gt;#&lt;/a&gt; session 和 cookie 有什么区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储位置不同：session 存储在服务器端；cookie 存储在浏览器端。&lt;/li&gt;
&lt;li&gt;安全性不同：cookie 安全性一般，在浏览器存储，可以被伪造和修改。&lt;/li&gt;
&lt;li&gt;容量和个数限制：cookie 有容量限制，每个站点下的 cookie 也有个数限制。&lt;/li&gt;
&lt;li&gt;存储的多样性：session 可以存储在 Redis 中、数据库中、应用程序中；而 cookie 只能存储在浏览器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简述-tcp-和-udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述-tcp-和-udp的区别&#34;&gt;#&lt;/a&gt; 简述 tcp 和 udp 的区别？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;tcp&lt;/strong&gt; 和 &lt;strong&gt;udp&lt;/strong&gt; 是 OSI 模型中的运输层中的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcp&lt;/strong&gt; 提供可靠的通信传输    &lt;strong&gt;udp&lt;/strong&gt; 则常被用于让广播和细节控制交给应用的通信传输。&lt;/p&gt;
&lt;p&gt;两者的区别大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp &lt;strong&gt;面向连接&lt;/strong&gt;，udp &lt;strong&gt;面向非连接&lt;/strong&gt;即发送数据前不需要建立链接；&lt;/li&gt;
&lt;li&gt;tcp 提供可靠的服务（数据传输），udp 无法保证；&lt;/li&gt;
&lt;li&gt;tcp 面向字节流，udp 面向报文；&lt;/li&gt;
&lt;li&gt;tcp 数据传输慢，udp 数据传输快；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp三次握手&#34;&gt;#&lt;/a&gt; tcp 三次握手&lt;/h3&gt;
&lt;p&gt;第一次&lt;/p&gt;
&lt;p&gt;第一次握手：建立连接时，客户端  发送&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=&#34;&gt; syn&lt;/span&gt; 包（seq=j）到  服务器，并进入 SYN_SENT 状态，等待  服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 [3]&lt;/p&gt;
&lt;p&gt;第二次&lt;/p&gt;
&lt;p&gt;第二次握手：服务器  收到&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=&#34;&gt; syn&lt;/span&gt; 包，必须确认  客户端  的 SYN（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=&#34;&gt;ack&lt;/span&gt;=j+1），同时自己也发送一个 SYN 包（seq=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。 [3]&lt;/p&gt;
&lt;p&gt;第三次&lt;/p&gt;
&lt;p&gt;第三次握手：客户端  收到  服务器  的 SYN+ACK 包，向  服务器  发送确认包 ACK (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=&#34;&gt;ack&lt;/span&gt;=k+1），此包发送完毕，客户端和服务器进入&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9FU1RBQkxJU0hFRA==&#34;&gt; ESTABLISHED&lt;/span&gt;（TCP 连接成功）状态，完成三次握手。&lt;/p&gt;
&lt;h3 id=&#34;为什么要三次握手两次不行吗为什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要三次握手两次不行吗为什么&#34;&gt;#&lt;/a&gt; 为什么要三次握手，两次不行吗？为什么？&lt;/h3&gt;
&lt;p&gt;如果采用两次握手，那么只要&lt;strong&gt;服务器&lt;/strong&gt;发出确认数据包就会建立连接，但由于&lt;strong&gt;客户端&lt;/strong&gt;此时并未响应服务器端的请求，那此时&lt;strong&gt;服务器端&lt;/strong&gt;就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。&lt;/p&gt;
&lt;p&gt;若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="Java基础" />
        <updated>2020-10-13T13:44:14.924Z</updated>
    </entry>
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
        <title>Java基础语法</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;java基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础语法&#34;&gt;#&lt;/a&gt; JAVA 基础语法&lt;/h1&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础语法&#34;&gt;#&lt;/a&gt; 基础语法&lt;/h2&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;p&gt;算数运算符、关系运算符、赋值运算符、逻辑运算符、三目运算符&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;h4 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;byte、short、int、long&lt;/li&gt;
&lt;li&gt;float、double、char&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引用数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用数据类型&#34;&gt;#&lt;/a&gt; 引用数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h2&gt;
&lt;h3 id=&#34;if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if&#34;&gt;#&lt;/a&gt; if&lt;/h3&gt;
&lt;p&gt;if 条件结构是根据条件判断之后再做处理&lt;/p&gt;
&lt;h3 id=&#34;switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#switch&#34;&gt;#&lt;/a&gt; switch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;switch (表达式){&lt;/p&gt;
&lt;p&gt;case 取值 1: 语句块 1;break;&lt;br&gt;
case 取值 n: 语句块 n;break; 		&lt;br&gt;
default: 语句块 n+1;break;&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switch 语句有关规则 表达式的返回值必须是下述几种类型之一：int,byte,char,short,String；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 子句中的取值必须是常量，且所有 case 子句中的取值应是不同的；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;while&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while&#34;&gt;#&lt;/a&gt; while&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;while 循环&lt;br&gt;
符合条件，循环继续执行；否则，循环退出&lt;br&gt;
特点：先判断，再执行&lt;/li&gt;
&lt;li&gt;do-while 循环&lt;br&gt;
先执行一遍循环操作，符合条件，循环继续执行；否则，循环退出&lt;br&gt;
特点：先执行，再判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;for&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for&#34;&gt;#&lt;/a&gt; for&lt;/h3&gt;
&lt;p&gt;语法：&lt;br&gt;
for (初始化参数；判断条件；更新循环变量){&lt;br&gt;
循环体；&lt;br&gt;
}&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h2&gt;
&lt;h3 id=&#34;冒泡排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冒泡排序&#34;&gt;#&lt;/a&gt; 冒泡排序&lt;/h3&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/li&gt;
&lt;li&gt;对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二分查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二分查找&#34;&gt;#&lt;/a&gt; 二分查找&lt;/h3&gt;
&lt;p&gt;二分查找也叫折半查找，是一种基本的查找算法，需要待查的表满足两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查找表必须使用顺序的存储结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找表必须按关键字大小有序排列&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法的基本思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将查找表中间位置数据元素的关键字与给定关键字比较，如果相等则查找成功；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则利用中间元素将表一分为二，如果中间关键字大于给定关键字，则在前一子表中进行折半查找，否则在后一子表中进行折半查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复以上过程直到找到满足条件的元素，则查找成功；或直到子表为空为止，此时查找不成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二分查找递归写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public int firstOccurrence (int [] nums,int target){
    int low = 0,high = nums.length - 1;
    while(low &amp;lt;=  high){   
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            return mid;
        }
        if(nums[mid] &amp;lt; target){
            low = mid+1;
        }else {
            high = mid-1;
        }
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="Java基础" />
        <updated>2020-10-10T04:45:31.957Z</updated>
    </entry>
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
        <title>面向对象</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;面向对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象&#34;&gt;#&lt;/a&gt; 面向对象&lt;/h1&gt;
&lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;h3 id=&#34;类与对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类与对象&#34;&gt;#&lt;/a&gt; 类与对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对象：对象是类的实例&lt;/li&gt;
&lt;li&gt;类：类是一个模板，描述一类对象的行为和状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造方法&#34;&gt;#&lt;/a&gt; 构造方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于对象初始化。&lt;/li&gt;
&lt;li&gt;构造方法的名称必须与类同名，一个类可以有多个构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法重载方法重写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法重载方法重写&#34;&gt;#&lt;/a&gt; 方法重载 / 方法重写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重写：重写是子类对父类的允许访问的方法的实现过程进行重新编写，返回值和形参都不能改变。子类可以根据需要，定义特定于自己的行为。&lt;/li&gt;
&lt;li&gt;重载：重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高级&#34;&gt;#&lt;/a&gt; 高级&lt;/h2&gt;
&lt;h3 id=&#34;final关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final关键字&#34;&gt;#&lt;/a&gt; final 关键字&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;final 修饰的类叫最终类，该类不能被继承。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;final 修饰的方法不能被重写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;抽象类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象类&#34;&gt;#&lt;/a&gt; 抽象类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;抽象类不能被实例化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h3&gt;
&lt;p&gt;接口是抽象方法的集合&lt;br&gt;
定义格式：&lt;br&gt;
interface 接口名称 { &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;
全局常量；&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;
抽象方法；&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
 接口和抽象类的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;抽象类要被子类继承，接口要被类实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口只能声明抽象方法，抽象类中可以声明抽象方法，也可以写非抽象方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类使用继承来使用，无法多继承。接口使用实现来使用，可以多实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类中可以包含 static 方法 ，但是接口中不允许（静态方法不能被子类重写，因此接口中不能声明 静态方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口不能有构造方法，但是抽象类可以有&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;equals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#equals&#34;&gt;#&lt;/a&gt; equals&lt;/h3&gt;
&lt;h3 id=&#34;内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内部类&#34;&gt;#&lt;/a&gt; 内部类&lt;/h3&gt;
&lt;h4 id=&#34;成员内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成员内部类&#34;&gt;#&lt;/a&gt; 成员内部类&lt;/h4&gt;
&lt;p&gt;成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Outer { &amp;nbsp; &amp;nbsp;
	private double x = 0; &amp;nbsp; &amp;nbsp;
	public Outer(double x) { 
	this.x = x; 
    } &amp;nbsp; &amp;nbsp;  &amp;nbsp; &amp;nbsp;
class Inner { &amp;nbsp; //内部类 &amp;nbsp; &amp;nbsp; &amp;nbsp;
	public void say() {
    	System.out.println(&#34;x=&#34;+x);&amp;nbsp;  
    } &amp;nbsp;
} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特点： 成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括 private 成员和静态成员）。&lt;/p&gt;
&lt;h4 id=&#34;局部内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局部内部类&#34;&gt;#&lt;/a&gt; 局部内部类&lt;/h4&gt;
&lt;p&gt;局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限 于方法内或者该作用域内。&lt;br&gt;
例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	class Person{ &amp;nbsp;  
		public Person() {
		}  
    }&amp;nbsp;  
    class Man{ &amp;nbsp; &amp;nbsp; &amp;nbsp;  
    	public Man(){
 &amp;nbsp; &amp;nbsp; &amp;nbsp;  }
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;public People getPerson(){         
        	class Student extends People{        
        	  //局部内部类 
       		  int age =0; &amp;nbsp;  
       		} &amp;nbsp;      
        return new Student(); &amp;nbsp;   
        }   
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;匿名内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匿名内部类&#34;&gt;#&lt;/a&gt; 匿名内部类&lt;/h4&gt;
&lt;p&gt;new 父类构造器（参数列表）| 实现接口（） { &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;
// 匿名内部类的类体部分&lt;br&gt;
}&lt;/p&gt;
&lt;h4 id=&#34;静态内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态内部类&#34;&gt;#&lt;/a&gt; 静态内部类&lt;/h4&gt;
&lt;p&gt;静态内部类是不需要依赖于外部类对象的，并且它不能使用外部类的非 static 成员变量或者方法.&lt;br&gt;
 格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Test { &amp;nbsp; 
	public static void main(String[] args)  { &amp;nbsp; &amp;nbsp; &amp;nbsp; 
		Outter.Inner inner = new Outter.Inner(); &amp;nbsp; 
	} 
}
 
class Outter { &amp;nbsp; &amp;nbsp;
	public Outter() { &amp;nbsp;
  	} &amp;nbsp; &amp;nbsp;  &amp;nbsp; &amp;nbsp;
static class Inner { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
	public Inner() { &amp;nbsp; &amp;nbsp; &amp;nbsp; 
    } &amp;nbsp; 
} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进阶&#34;&gt;#&lt;/a&gt; 进阶&lt;/h2&gt;
&lt;h3 id=&#34;封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装&#34;&gt;#&lt;/a&gt; 封装&lt;/h3&gt;
&lt;p&gt;private 修饰变量&lt;br&gt;
 Getter/Setter&lt;/p&gt;
&lt;h3 id=&#34;this&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this&#34;&gt;#&lt;/a&gt; this&lt;/h3&gt;
&lt;p&gt;使用 this 关键字可以完成以下的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用类中的属性&lt;/li&gt;
&lt;li&gt;调用类中的方法或构造方法&lt;/li&gt;
&lt;li&gt;表示当前对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static&#34;&gt;#&lt;/a&gt; static&lt;/h3&gt;
&lt;p&gt;static 表示 “静态” 的意思，可以用来修饰成员变量和成员方法&lt;br&gt;
重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态成员 在类加载时加载并初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论一个类存在多少个对象，静态的属性，永远在内存中只有一份&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在访问时： 静态不能访问非静态，非静态可以访问静态！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h2&gt;
&lt;h3 id=&#34;try-catch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#try-catch&#34;&gt;#&lt;/a&gt; try&amp;nbsp; catch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;异常指的是 Exception，Exception 类，在 Java 中存在一个父 Throwable（可能的抛出）&lt;/li&gt;
&lt;li&gt;Throwable 存在两个子类：
&lt;ol&gt;
&lt;li&gt;Error：表示的是错误，是 JVM 发出的错误操作，只能尽量避免，无法用代码处理。&lt;/li&gt;
&lt;li&gt;Exception：一般表示所有程序中的错误，所以一般在程序中将进行 try…catch 的处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throwthrows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#throwthrows&#34;&gt;#&lt;/a&gt; throw/throws&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;throws 关键字：&lt;br&gt;
此关键字主要在方法的声明上使 用，表示方法中不处理异常，而交给调用处处理。&lt;br&gt;
格式：&lt;br&gt;
返回值 方法名称 () throws Exception {&lt;br&gt;
}&lt;/li&gt;
&lt;li&gt;throw 关键字&lt;br&gt;
 throw 关键字表示在程序中人为的抛出一个异常，因为从异常处理机制来看，所有的异常一旦产生之后，实际上抛出 的就是一个异常类的实例化对象，那么此对象也可以由 throw 直接抛出。&lt;br&gt;
代码： throw new Exception (&#34;抛着玩的。&#34;) ;&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="面向对象" />
        <updated>2020-10-10T04:42:25.431Z</updated>
    </entry>
</feed>
