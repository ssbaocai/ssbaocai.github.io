{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"java\" category",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/11/08/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/",
            "url": "https://www.baocai-blog.cn/2020/11/08/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/",
            "title": "Java中的常用算法",
            "date_published": "2020-11-08T07:10:22.463Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"java中的常用算法\"><a class=\"anchor\" href=\"#java中的常用算法\">#</a> Java 中的常用算法</h1>\n<h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<p>冒泡排序算法是把较小的元素往前调或者把较大的元素往后调。这种方法主要是通过对相邻两个元素进行大小的比较，根据比较结果和算法规则对该二元素的位置进行交换，这样逐个依次进行比较和交换，就能达到排序目的。<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE2MzcwODE4Ni0xNzAzNjAxNDQ4LmdpZg==\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531163708186-1703601448.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>通过每一次遍历获取最大 / 最小值</p>\n</li>\n<li>\n<p>将最大值 / 最小值放在尾部 / 头部</p>\n</li>\n<li>\n<p>然后除开最大值 / 最小值，剩下的数据在进行遍历获取最大 / 最小值</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n   int arr[] = {8, 5, 3, 2, 4};\n    //冒泡\n    for (int i = 0; i &lt; arr.length; i++) {\n        //外层循环，遍历次数\n        for (int j = 0; j &lt; arr.length - i - 1; j++) {\n            //内层循环，升序（如果前一个值比后一个值大，则交换）\n            //内层循环一次，获取一个最大值\n            if (arr[j] &gt; arr[j + 1]) {\n                int temp = arr[j + 1];\n                arr[j + 1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程（红色：移动的数据）</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\maopao.jpg\" alt=\"alt\" style=\"zoom: 80%;\" /&gt;</p>\n<p>选择排序</p>\n</li>\n</ol>\n<p>选择排序算法的基本思路是为每一个位置选择当前最小的元素。选择排序的基本思想是，基于直接选择排序和堆排序这两种基本的简单排序方法。首先从第 1 个位置开始对全部元素进行选择，选出全部元素中最小的给该位置，再对第 2 个位置进行选择，在剩余元素中选择最小的给该位置即可；<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3MDIwNTgyMS0xOTgzNjc4NjQzLmdpZg==\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531170205821-1983678643.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>将第一个值看成最小值</p>\n</li>\n<li>\n<p>然后和后续的比较找出最小值和下标</p>\n</li>\n<li>\n<p>交换本次遍历的起始值和最小值</p>\n</li>\n<li>\n<p>说明：每次遍历的时候，将前面找出的最小值，看成一个有序的列表，后面的看成无序的列表，然后每次遍历无序列表找出最小值。</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n   int arr[] = {6, 5, 3, 2, 4};\n    //选择\n    for (int i = 0; i &lt; arr.length; i++) {\n        //默认第一个是最小的。\n        int min = arr[i];\n        //记录最小的下标\n        int index = i;\n        //通过与后面的数据进行比较得出，最小值和下标\n        for (int j = i + 1; j &lt; arr.length; j++) {\n            if (min &gt; arr[j]) {\n                min = arr[j];\n                index = j;\n            }\n        }\n        //然后将最小值与本次循环的，开始值交换\n        int temp = arr[i];\n        arr[i] = min;\n        arr[index] = temp;\n        //说明：将i前面的数据看成一个排好的队列，i后面的看成一个无序队列。每次只需要找无需的最小值，做替换\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程（红色：移动的数据）</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\xuanze.jpg\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n</li>\n</ol>\n<h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2>\n<p>插入排序算法是基于某序列已经有序排列的情况下，通过一次插入一个元素的方式按照原有排序方式增加元素。<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3MDk1MzI4My0xODA2MTUzMzMxLmdpZg==\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531170953283-1806153331.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>默认从第二个数据开始比较。</p>\n</li>\n<li>\n<p>如果第二个数据比第一个小，则交换。然后在用第三个数据比较，如果比前面小，则插入（狡猾）。否则，退出循环</p>\n</li>\n<li>\n<p>说明：默认将第一数据看成有序列表，后面无序的列表循环每一个数据，如果比前面的数据小则插入（交换）。否则退出。</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n int arr[] = {7, 5, 3, 2, 4};\n\n//插入排序\nfor (int i = 1; i &lt; arr.length; i++) {\n    //外层循环，从第二个开始比较\n    for (int j = i; j &gt; 0; j--) {\n        //内存循环，与前面排好序的数据比较，如果后面的数据小于前面的则交换\n        if (arr[j] &lt; arr[j - 1]) {\n            int temp = arr[j - 1];\n            arr[j - 1] = arr[j];\n            arr[j] = temp;\n        } else {\n            //如果不小于，说明插入完毕，退出内层循环\n            break;\n        }\n    }\n}\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程（红色：有序，黑色：无序）</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\charu.jpg\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n</li>\n</ol>\n<h2 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<p>快速排序的基本思想是：通过一趟排序算法把所需要排序的序列的元素分割成两大块，其中，一部分的元素都要小于或等于另外一部分的序列元素，然后仍根据该种方法对划分后的这两块序列的元素分别再次实行快速排序算法，排序实现的整个过程可以是递归的来进行调用，最终能够实现将所需排序的无序序列元素变为一个有序的序列。<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3NTcwOTUxNS0xNjk2MDI2MjkuZ2lm\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531175709515-169602629.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>确认列表第一个数据为中间值，第一个值看成空缺（低指针空缺）。</p>\n</li>\n<li>\n<p>然后在剩下的队列中，看成有左右两个指针（高低）。</p>\n</li>\n<li>\n<p>开始高指针向左移动，如果遇到小于中间值的数据，则将这个数据赋值到低指针空缺，并且将高指针的数据看成空缺值（高指针空缺）。然后先向右移动一下低指针，并且切换低指针移动。</p>\n</li>\n<li>\n<p>当低指针移动到大于中间值的时候，赋值到高指针空缺的地方。然后先高指针向左移动，并且切换高指针移动。重复 c、d 操作。</p>\n</li>\n<li>\n<p>直到高指针和低指针相等时退出，并且将中间值赋值给对应指针位置。</p>\n</li>\n<li>\n<p>然后将中间值的左右两边看成行的列表，进行快速排序操作。</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n\n    int arr[] = {7, 5, 3, 2, 4, 1, 8, 9, 6};\n\n    //快速排序\n    int low = 0;\n    int high = arr.length - 1;\n    quickSort(arr, low, high);  \n}\n\npublic static void quickSort(int[] arr, int low, int high) {\n    //如果指针在同一位置(只有一个数据时)，退出\n    if (high - low &lt; 1) {\n        return;\n    }\n    //标记，从高指针开始，还是低指针（默认高指针）\n    boolean flag = true;\n    //记录指针的其实位置\n    int start = low;\n    int end = high;\n    //默认中间值为低指针的第一个值\n    int midValue = arr[low];\n    while (true) {\n        //高指针移动\n        if (flag) {\n            //如果列表右方的数据大于中间值，则向左移动\n            if (arr[high] &gt; midValue) {\n                high--;\n            } else if (arr[high] &lt; midValue) {\n                //如果小于，则覆盖最开始的低指针值，并且移动低指针，标志位改成从低指针开始移动\n                arr[low] = arr[high];\n                low++;\n                flag = false;\n            }\n        } else {\n            //如果低指针数据小于中间值，则低指针向右移动\n            if (arr[low] &lt; midValue) {\n                low++;\n            } else if (arr[low] &gt; midValue) {\n            \t//如果低指针的值大于中间值，则覆盖高指针停留时的数据，并向左移动高指针。切换为高指针移动\n                arr[high] = arr[low];\n                high--;\n                flag = true;\n            }\n        }\n        //当两个指针的位置相同时，则找到了中间值的位置，并退出循环\n        if (low == high) {\n            arr[low] = midValue;\n            break;\n        }\n    }\n    //然后出现有，中间值左边的小于中间值。右边的大于中间值。\n    //然后在对左右两边的列表在进行快速排序\n    quickSort(arr, start, low -1);\n    quickSort(arr, low + 1, end);\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程 (橙色：中间值，蓝色：确认位置的数据，红色：移动的数据)</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\kuaisu.jpg\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n</li>\n</ol>\n<p>转载出处：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGw0MDk1NDYyOTcvcC8xMDk1Njk2MC5odG1s\">https://www.cnblogs.com/ll409546297/p/10956960.html</span></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "Java应用"
            ]
        },
        {
            "id": "https://www.baocai-blog.cn/2020/10/13/JavaWeb/",
            "url": "https://www.baocai-blog.cn/2020/10/13/JavaWeb/",
            "title": "JavaWeb",
            "date_published": "2020-10-13T13:44:14.924Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"javaweb\"><a class=\"anchor\" href=\"#javaweb\">#</a> JavaWeb</h1>\n<h3 id=\"说下原生jdbc操作数据库流程\"><a class=\"anchor\" href=\"#说下原生jdbc操作数据库流程\">#</a> 说下原生 jdbc 操作数据库流程？</h3>\n<ul>\n<li>第一步：Class.forName () 加载数据库连接驱动；</li>\n<li>第二步：DriverManager.getConnection () 获取数据连接对象；</li>\n<li>第三步：根据 SQL 获取 sql 会话对象，有 2 种方式 Statement、PreparedStatement ;</li>\n<li>第四步：执行 SQL 处理结果集，执行 SQL 前如果有参数值就设置参数值 setXXX ();</li>\n<li>第五步：关闭结果集、关闭会话、关闭连接。<br>\n详细代码请看（封装）：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjk1NDI2MTEvYXJ0aWNsZS9kZXRhaWxzLzUyNDI2MDA2\">http://blog.csdn.net/qq_29542611/article/details/52426006</span></li>\n</ul>\n<h3 id=\"session-和-cookie-有什么区别\"><a class=\"anchor\" href=\"#session-和-cookie-有什么区别\">#</a> session 和 cookie 有什么区别？</h3>\n<ul>\n<li>存储位置不同：session 存储在服务器端；cookie 存储在浏览器端。</li>\n<li>安全性不同：cookie 安全性一般，在浏览器存储，可以被伪造和修改。</li>\n<li>容量和个数限制：cookie 有容量限制，每个站点下的 cookie 也有个数限制。</li>\n<li>存储的多样性：session 可以存储在 Redis 中、数据库中、应用程序中；而 cookie 只能存储在浏览器中。</li>\n</ul>\n<h3 id=\"简述-tcp-和-udp的区别\"><a class=\"anchor\" href=\"#简述-tcp-和-udp的区别\">#</a> 简述 tcp 和 udp 的区别？</h3>\n<p><strong>tcp</strong> 和 <strong>udp</strong> 是 OSI 模型中的运输层中的协议。</p>\n<p><strong>tcp</strong> 提供可靠的通信传输    <strong>udp</strong> 则常被用于让广播和细节控制交给应用的通信传输。</p>\n<p>两者的区别大致如下：</p>\n<ul>\n<li>tcp <strong>面向连接</strong>，udp <strong>面向非连接</strong>即发送数据前不需要建立链接；</li>\n<li>tcp 提供可靠的服务（数据传输），udp 无法保证；</li>\n<li>tcp 面向字节流，udp 面向报文；</li>\n<li>tcp 数据传输慢，udp 数据传输快；</li>\n</ul>\n<h3 id=\"tcp三次握手\"><a class=\"anchor\" href=\"#tcp三次握手\">#</a> tcp 三次握手</h3>\n<p>第一次</p>\n<p>第一次握手：建立连接时，客户端  发送<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=\"> syn</span> 包（seq=j）到  服务器，并进入 SYN_SENT 状态，等待  服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 [3]</p>\n<p>第二次</p>\n<p>第二次握手：服务器  收到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=\"> syn</span> 包，必须确认  客户端  的 SYN（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=\">ack</span>=j+1），同时自己也发送一个 SYN 包（seq=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。 [3]</p>\n<p>第三次</p>\n<p>第三次握手：客户端  收到  服务器  的 SYN+ACK 包，向  服务器  发送确认包 ACK (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=\">ack</span>=k+1），此包发送完毕，客户端和服务器进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9FU1RBQkxJU0hFRA==\"> ESTABLISHED</span>（TCP 连接成功）状态，完成三次握手。</p>\n<h3 id=\"为什么要三次握手两次不行吗为什么\"><a class=\"anchor\" href=\"#为什么要三次握手两次不行吗为什么\">#</a> 为什么要三次握手，两次不行吗？为什么？</h3>\n<p>如果采用两次握手，那么只要<strong>服务器</strong>发出确认数据包就会建立连接，但由于<strong>客户端</strong>此时并未响应服务器端的请求，那此时<strong>服务器端</strong>就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。</p>\n<p>若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "url": "https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "title": "Java基础语法",
            "date_published": "2020-10-10T04:45:31.957Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"java基础语法\"><a class=\"anchor\" href=\"#java基础语法\">#</a> JAVA 基础语法</h1>\n<h2 id=\"基础语法\"><a class=\"anchor\" href=\"#基础语法\">#</a> 基础语法</h2>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p>算数运算符、关系运算符、赋值运算符、逻辑运算符、三目运算符</p>\n<h3 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<h4 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h4>\n<ul>\n<li>byte、short、int、long</li>\n<li>float、double、char</li>\n<li>boolean</li>\n</ul>\n<h4 id=\"引用数据类型\"><a class=\"anchor\" href=\"#引用数据类型\">#</a> 引用数据类型</h4>\n<ul>\n<li>class</li>\n<li>interface</li>\n<li>数组</li>\n</ul>\n<h2 id=\"流程控制\"><a class=\"anchor\" href=\"#流程控制\">#</a> 流程控制</h2>\n<h3 id=\"if\"><a class=\"anchor\" href=\"#if\">#</a> if</h3>\n<p>if 条件结构是根据条件判断之后再做处理</p>\n<h3 id=\"switch\"><a class=\"anchor\" href=\"#switch\">#</a> switch</h3>\n<ul>\n<li>\n<p>switch (表达式){</p>\n<p>case 取值 1: 语句块 1;break;<br>\ncase 取值 n: 语句块 n;break; \t\t<br>\ndefault: 语句块 n+1;break;<br>\n}</p>\n</li>\n<li>\n<p>switch 语句有关规则 表达式的返回值必须是下述几种类型之一：int,byte,char,short,String；</p>\n</li>\n<li>\n<p>case 子句中的取值必须是常量，且所有 case 子句中的取值应是不同的；</p>\n</li>\n</ul>\n<h3 id=\"while\"><a class=\"anchor\" href=\"#while\">#</a> while</h3>\n<ul>\n<li>while 循环<br>\n符合条件，循环继续执行；否则，循环退出<br>\n特点：先判断，再执行</li>\n<li>do-while 循环<br>\n先执行一遍循环操作，符合条件，循环继续执行；否则，循环退出<br>\n特点：先执行，再判断</li>\n</ul>\n<h3 id=\"for\"><a class=\"anchor\" href=\"#for\">#</a> for</h3>\n<p>语法：<br>\nfor (初始化参数；判断条件；更新循环变量){<br>\n循环体；<br>\n}</p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<p>原理：</p>\n<ul>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的</li>\n</ul>\n<h3 id=\"二分查找\"><a class=\"anchor\" href=\"#二分查找\">#</a> 二分查找</h3>\n<p>二分查找也叫折半查找，是一种基本的查找算法，需要待查的表满足两个条件：</p>\n<ol>\n<li>\n<p>查找表必须使用顺序的存储结构</p>\n</li>\n<li>\n<p>查找表必须按关键字大小有序排列</p>\n</li>\n</ol>\n<p>算法的基本思想是：</p>\n<ul>\n<li>\n<p>将查找表中间位置数据元素的关键字与给定关键字比较，如果相等则查找成功；</p>\n</li>\n<li>\n<p>否则利用中间元素将表一分为二，如果中间关键字大于给定关键字，则在前一子表中进行折半查找，否则在后一子表中进行折半查找。</p>\n</li>\n<li>\n<p>重复以上过程直到找到满足条件的元素，则查找成功；或直到子表为空为止，此时查找不成功。</p>\n</li>\n</ul>\n<p>二分查找递归写法：</p>\n<pre><code>public int firstOccurrence (int [] nums,int target){\n    int low = 0,high = nums.length - 1;\n    while(low &lt;=  high){   \n        int mid = low + (high-low)/2;\n        if(nums[mid] == target){\n            return mid;\n        }\n        if(nums[mid] &lt; target){\n            low = mid+1;\n        }else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://www.baocai-blog.cn/2020/10/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "https://www.baocai-blog.cn/2020/10/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "面向对象",
            "date_published": "2020-10-10T04:42:25.431Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<h3 id=\"类与对象\"><a class=\"anchor\" href=\"#类与对象\">#</a> 类与对象</h3>\n<ul>\n<li>对象：对象是类的实例</li>\n<li>类：类是一个模板，描述一类对象的行为和状态</li>\n</ul>\n<h3 id=\"构造方法\"><a class=\"anchor\" href=\"#构造方法\">#</a> 构造方法</h3>\n<ul>\n<li>用于对象初始化。</li>\n<li>构造方法的名称必须与类同名，一个类可以有多个构造方法。</li>\n</ul>\n<h3 id=\"方法重载方法重写\"><a class=\"anchor\" href=\"#方法重载方法重写\">#</a> 方法重载 / 方法重写</h3>\n<ul>\n<li>重写：重写是子类对父类的允许访问的方法的实现过程进行重新编写，返回值和形参都不能改变。子类可以根据需要，定义特定于自己的行为。</li>\n<li>重载：重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</li>\n</ul>\n<h2 id=\"高级\"><a class=\"anchor\" href=\"#高级\">#</a> 高级</h2>\n<h3 id=\"final关键字\"><a class=\"anchor\" href=\"#final关键字\">#</a> final 关键字</h3>\n<ol>\n<li>\n<p>final 修饰的类叫最终类，该类不能被继承。</p>\n</li>\n<li>\n<p>final 修饰的方法不能被重写。</p>\n</li>\n<li>\n<p>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改</p>\n</li>\n</ol>\n<h3 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h3>\n<ol>\n<li>\n<p>抽象类不能被实例化</p>\n</li>\n<li>\n<p>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p>\n</li>\n<li>\n<p>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</p>\n</li>\n<li>\n<p>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</p>\n</li>\n<li>\n<p>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</p>\n</li>\n</ol>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p>接口是抽象方法的集合<br>\n定义格式：<br>\ninterface 接口名称 { &nbsp; &nbsp; &nbsp;<br>\n全局常量；&nbsp; &nbsp; &nbsp;<br>\n抽象方法；&nbsp;<br>\n}<br>\n 接口和抽象类的区别：</p>\n<ol>\n<li>\n<p>抽象类要被子类继承，接口要被类实现。</p>\n</li>\n<li>\n<p>接口只能声明抽象方法，抽象类中可以声明抽象方法，也可以写非抽象方法。</p>\n</li>\n<li>\n<p>接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。</p>\n</li>\n<li>\n<p>抽象类使用继承来使用，无法多继承。接口使用实现来使用，可以多实现</p>\n</li>\n<li>\n<p>抽象类中可以包含 static 方法 ，但是接口中不允许（静态方法不能被子类重写，因此接口中不能声明 静态方法）</p>\n</li>\n<li>\n<p>接口不能有构造方法，但是抽象类可以有</p>\n</li>\n</ol>\n<h3 id=\"equals\"><a class=\"anchor\" href=\"#equals\">#</a> equals</h3>\n<h3 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h3>\n<h4 id=\"成员内部类\"><a class=\"anchor\" href=\"#成员内部类\">#</a> 成员内部类</h4>\n<p>成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：</p>\n<pre><code>class Outer { &nbsp; &nbsp;\n\tprivate double x = 0; &nbsp; &nbsp;\n\tpublic Outer(double x) { \n\tthis.x = x; \n    } &nbsp; &nbsp;  &nbsp; &nbsp;\nclass Inner { &nbsp; //内部类 &nbsp; &nbsp; &nbsp;\n\tpublic void say() {\n    \tSystem.out.println(\"x=\"+x);&nbsp;  \n    } &nbsp;\n} \n}\n</code></pre>\n<p>特点： 成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括 private 成员和静态成员）。</p>\n<h4 id=\"局部内部类\"><a class=\"anchor\" href=\"#局部内部类\">#</a> 局部内部类</h4>\n<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限 于方法内或者该作用域内。<br>\n例如：</p>\n<pre><code>\tclass Person{ &nbsp;  \n\t\tpublic Person() {\n\t\t}  \n    }&nbsp;  \n    class Man{ &nbsp; &nbsp; &nbsp;  \n    \tpublic Man(){\n &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp; &nbsp;public People getPerson(){         \n        \tclass Student extends People{        \n        \t  //局部内部类 \n       \t\t  int age =0; &nbsp;  \n       \t\t} &nbsp;      \n        return new Student(); &nbsp;   \n        }   \n    }\n</code></pre>\n<h4 id=\"匿名内部类\"><a class=\"anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h4>\n<p>new 父类构造器（参数列表）| 实现接口（） { &nbsp; &nbsp; &nbsp;<br>\n// 匿名内部类的类体部分<br>\n}</p>\n<h4 id=\"静态内部类\"><a class=\"anchor\" href=\"#静态内部类\">#</a> 静态内部类</h4>\n<p>静态内部类是不需要依赖于外部类对象的，并且它不能使用外部类的非 static 成员变量或者方法.<br>\n 格式：</p>\n<pre><code>public class Test { &nbsp; \n\tpublic static void main(String[] args)  { &nbsp; &nbsp; &nbsp; \n\t\tOutter.Inner inner = new Outter.Inner(); &nbsp; \n\t} \n}\n \nclass Outter { &nbsp; &nbsp;\n\tpublic Outter() { &nbsp;\n  \t} &nbsp; &nbsp;  &nbsp; &nbsp;\nstatic class Inner { &nbsp; &nbsp; &nbsp; &nbsp;\n\tpublic Inner() { &nbsp; &nbsp; &nbsp; \n    } &nbsp; \n} \n}\n</code></pre>\n<h2 id=\"进阶\"><a class=\"anchor\" href=\"#进阶\">#</a> 进阶</h2>\n<h3 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h3>\n<p>private 修饰变量<br>\n Getter/Setter</p>\n<h3 id=\"this\"><a class=\"anchor\" href=\"#this\">#</a> this</h3>\n<p>使用 this 关键字可以完成以下的操作：</p>\n<ul>\n<li>调用类中的属性</li>\n<li>调用类中的方法或构造方法</li>\n<li>表示当前对象</li>\n</ul>\n<h3 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h3>\n<p>static 表示 “静态” 的意思，可以用来修饰成员变量和成员方法<br>\n重点：</p>\n<ol>\n<li>\n<p>静态成员 在类加载时加载并初始化。</p>\n</li>\n<li>\n<p>无论一个类存在多少个对象，静态的属性，永远在内存中只有一份</p>\n</li>\n<li>\n<p>在访问时： 静态不能访问非静态，非静态可以访问静态！</p>\n</li>\n</ol>\n<h2 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<h3 id=\"try-catch\"><a class=\"anchor\" href=\"#try-catch\">#</a> try&nbsp; catch</h3>\n<ul>\n<li>异常指的是 Exception，Exception 类，在 Java 中存在一个父 Throwable（可能的抛出）</li>\n<li>Throwable 存在两个子类：\n<ol>\n<li>Error：表示的是错误，是 JVM 发出的错误操作，只能尽量避免，无法用代码处理。</li>\n<li>Exception：一般表示所有程序中的错误，所以一般在程序中将进行 try…catch 的处理。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"throwthrows\"><a class=\"anchor\" href=\"#throwthrows\">#</a> throw/throws</h3>\n<ul>\n<li>throws 关键字：<br>\n此关键字主要在方法的声明上使 用，表示方法中不处理异常，而交给调用处处理。<br>\n格式：<br>\n返回值 方法名称 () throws Exception {<br>\n}</li>\n<li>throw 关键字<br>\n throw 关键字表示在程序中人为的抛出一个异常，因为从异常处理机制来看，所有的异常一旦产生之后，实际上抛出 的就是一个异常类的实例化对象，那么此对象也可以由 throw 直接抛出。<br>\n代码： throw new Exception (\"抛着玩的。\") ;</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "面向对象"
            ]
        }
    ]
}