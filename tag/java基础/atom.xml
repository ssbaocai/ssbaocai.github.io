<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.baocai-blog.cn</id>
    <title>手撕包菜 • Posts by &#34;java基础&#34; tag</title>
    <link href="https://www.baocai-blog.cn" />
    <updated>2020-10-13T13:44:14.924Z</updated>
    <category term="Java基础" />
    <category term="框架" />
    <category term="数据库" />
    <category term="面向对象" />
    <category term="XML，JSON" />
    <category term="html" />
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/13/JavaWeb/</id>
        <title>JavaWeb</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/13/JavaWeb/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;javaweb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javaweb&#34;&gt;#&lt;/a&gt; JavaWeb&lt;/h1&gt;
&lt;h3 id=&#34;说下原生jdbc操作数据库流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说下原生jdbc操作数据库流程&#34;&gt;#&lt;/a&gt; 说下原生 jdbc 操作数据库流程？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一步：Class.forName () 加载数据库连接驱动；&lt;/li&gt;
&lt;li&gt;第二步：DriverManager.getConnection () 获取数据连接对象；&lt;/li&gt;
&lt;li&gt;第三步：根据 SQL 获取 sql 会话对象，有 2 种方式 Statement、PreparedStatement ;&lt;/li&gt;
&lt;li&gt;第四步：执行 SQL 处理结果集，执行 SQL 前如果有参数值就设置参数值 setXXX ();&lt;/li&gt;
&lt;li&gt;第五步：关闭结果集、关闭会话、关闭连接。&lt;br&gt;
详细代码请看（封装）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjk1NDI2MTEvYXJ0aWNsZS9kZXRhaWxzLzUyNDI2MDA2&#34;&gt;http://blog.csdn.net/qq_29542611/article/details/52426006&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;session-和-cookie-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session-和-cookie-有什么区别&#34;&gt;#&lt;/a&gt; session 和 cookie 有什么区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存储位置不同：session 存储在服务器端；cookie 存储在浏览器端。&lt;/li&gt;
&lt;li&gt;安全性不同：cookie 安全性一般，在浏览器存储，可以被伪造和修改。&lt;/li&gt;
&lt;li&gt;容量和个数限制：cookie 有容量限制，每个站点下的 cookie 也有个数限制。&lt;/li&gt;
&lt;li&gt;存储的多样性：session 可以存储在 Redis 中、数据库中、应用程序中；而 cookie 只能存储在浏览器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简述-tcp-和-udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述-tcp-和-udp的区别&#34;&gt;#&lt;/a&gt; 简述 tcp 和 udp 的区别？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;tcp&lt;/strong&gt; 和 &lt;strong&gt;udp&lt;/strong&gt; 是 OSI 模型中的运输层中的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcp&lt;/strong&gt; 提供可靠的通信传输    &lt;strong&gt;udp&lt;/strong&gt; 则常被用于让广播和细节控制交给应用的通信传输。&lt;/p&gt;
&lt;p&gt;两者的区别大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp &lt;strong&gt;面向连接&lt;/strong&gt;，udp &lt;strong&gt;面向非连接&lt;/strong&gt;即发送数据前不需要建立链接；&lt;/li&gt;
&lt;li&gt;tcp 提供可靠的服务（数据传输），udp 无法保证；&lt;/li&gt;
&lt;li&gt;tcp 面向字节流，udp 面向报文；&lt;/li&gt;
&lt;li&gt;tcp 数据传输慢，udp 数据传输快；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp三次握手&#34;&gt;#&lt;/a&gt; tcp 三次握手&lt;/h3&gt;
&lt;p&gt;第一次&lt;/p&gt;
&lt;p&gt;第一次握手：建立连接时，客户端  发送&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=&#34;&gt; syn&lt;/span&gt; 包（seq=j）到  服务器，并进入 SYN_SENT 状态，等待  服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 [3]&lt;/p&gt;
&lt;p&gt;第二次&lt;/p&gt;
&lt;p&gt;第二次握手：服务器  收到&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9zeW4=&#34;&gt; syn&lt;/span&gt; 包，必须确认  客户端  的 SYN（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=&#34;&gt;ack&lt;/span&gt;=j+1），同时自己也发送一个 SYN 包（seq=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态。 [3]&lt;/p&gt;
&lt;p&gt;第三次&lt;/p&gt;
&lt;p&gt;第三次握手：客户端  收到  服务器  的 SYN+ACK 包，向  服务器  发送确认包 ACK (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9hY2s=&#34;&gt;ack&lt;/span&gt;=k+1），此包发送完毕，客户端和服务器进入&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9FU1RBQkxJU0hFRA==&#34;&gt; ESTABLISHED&lt;/span&gt;（TCP 连接成功）状态，完成三次握手。&lt;/p&gt;
&lt;h3 id=&#34;为什么要三次握手两次不行吗为什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要三次握手两次不行吗为什么&#34;&gt;#&lt;/a&gt; 为什么要三次握手，两次不行吗？为什么？&lt;/h3&gt;
&lt;p&gt;如果采用两次握手，那么只要&lt;strong&gt;服务器&lt;/strong&gt;发出确认数据包就会建立连接，但由于&lt;strong&gt;客户端&lt;/strong&gt;此时并未响应服务器端的请求，那此时&lt;strong&gt;服务器端&lt;/strong&gt;就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。&lt;/p&gt;
&lt;p&gt;若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="Java基础" />
        <updated>2020-10-13T13:44:14.924Z</updated>
    </entry>
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
        <title>Java基础语法</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/10/JAVA%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;java基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础语法&#34;&gt;#&lt;/a&gt; JAVA 基础语法&lt;/h1&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础语法&#34;&gt;#&lt;/a&gt; 基础语法&lt;/h2&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;p&gt;算数运算符、关系运算符、赋值运算符、逻辑运算符、三目运算符&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;h4 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;byte、short、int、long&lt;/li&gt;
&lt;li&gt;float、double、char&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引用数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用数据类型&#34;&gt;#&lt;/a&gt; 引用数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h2&gt;
&lt;h3 id=&#34;if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if&#34;&gt;#&lt;/a&gt; if&lt;/h3&gt;
&lt;p&gt;if 条件结构是根据条件判断之后再做处理&lt;/p&gt;
&lt;h3 id=&#34;switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#switch&#34;&gt;#&lt;/a&gt; switch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;switch (表达式){&lt;/p&gt;
&lt;p&gt;case 取值 1: 语句块 1;break;&lt;br&gt;
case 取值 n: 语句块 n;break; 		&lt;br&gt;
default: 语句块 n+1;break;&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switch 语句有关规则 表达式的返回值必须是下述几种类型之一：int,byte,char,short,String；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case 子句中的取值必须是常量，且所有 case 子句中的取值应是不同的；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;while&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while&#34;&gt;#&lt;/a&gt; while&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;while 循环&lt;br&gt;
符合条件，循环继续执行；否则，循环退出&lt;br&gt;
特点：先判断，再执行&lt;/li&gt;
&lt;li&gt;do-while 循环&lt;br&gt;
先执行一遍循环操作，符合条件，循环继续执行；否则，循环退出&lt;br&gt;
特点：先执行，再判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;for&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for&#34;&gt;#&lt;/a&gt; for&lt;/h3&gt;
&lt;p&gt;语法：&lt;br&gt;
for (初始化参数；判断条件；更新循环变量){&lt;br&gt;
循环体；&lt;br&gt;
}&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h2&gt;
&lt;h3 id=&#34;冒泡排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冒泡排序&#34;&gt;#&lt;/a&gt; 冒泡排序&lt;/h3&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/li&gt;
&lt;li&gt;对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二分查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二分查找&#34;&gt;#&lt;/a&gt; 二分查找&lt;/h3&gt;
&lt;p&gt;二分查找也叫折半查找，是一种基本的查找算法，需要待查的表满足两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查找表必须使用顺序的存储结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找表必须按关键字大小有序排列&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法的基本思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将查找表中间位置数据元素的关键字与给定关键字比较，如果相等则查找成功；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则利用中间元素将表一分为二，如果中间关键字大于给定关键字，则在前一子表中进行折半查找，否则在后一子表中进行折半查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复以上过程直到找到满足条件的元素，则查找成功；或直到子表为空为止，此时查找不成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二分查找递归写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public int firstOccurrence (int [] nums,int target){
    int low = 0,high = nums.length - 1;
    while(low &amp;lt;=  high){   
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            return mid;
        }
        if(nums[mid] &amp;lt; target){
            low = mid+1;
        }else {
            high = mid-1;
        }
    }
    return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="Java基础" />
        <updated>2020-10-10T04:45:31.957Z</updated>
    </entry>
</feed>
