{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"容器\" tag",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/10/04/%E5%AE%B9%E5%99%A8%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89/",
            "url": "https://www.baocai-blog.cn/2020/10/04/%E5%AE%B9%E5%99%A8%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89/",
            "title": "Java容器（Cellection/Map）",
            "date_published": "2020-10-04T06:58:46.815Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"java-容器分为-collection-和-map-两大类\"><a class=\"anchor\" href=\"#java-容器分为-collection-和-map-两大类\">#</a> Java 容器分为 Collection 和 Map 两大类</h4>\n<ul>\n<li>\n<p>Collection</p>\n<p>List</p>\n</li>\n<li>\n<ul>\n<li>ArrayList</li>\n<li>LinkedList</li>\n<li>Vector</li>\n<li>Stack</li>\n</ul>\n</li>\n</ul>\n<p>​       Set</p>\n<ul>\n<li>\n<ul>\n<li>HashSet</li>\n<li>LinkedHashSet</li>\n<li>TreeSet</li>\n</ul>\n</li>\n<li>\n<p>Map</p>\n<p>HashMap</p>\n</li>\n<li>\n<ul>\n<li>LinkedHashMap</li>\n</ul>\n</li>\n</ul>\n<p>​       TreeMap、ConcurrentHashMap、Hashtable</p>\n<h4 id=\"list-set-map-之间的区别是什么\"><a class=\"anchor\" href=\"#list-set-map-之间的区别是什么\">#</a> List、Set、Map 之间的区别是什么？</h4>\n<p>List、Set、Map 的区别主要体现在两个方面：元素是否有序、是否允许元素重复。</p>\n<p><img data-src=\"C:%5CUsers%5CYangMiemie%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200925103453410.png\" alt=\"image-20200925103453410\"></p>\n<p><strong>List 和 Set</strong> 是存储 <strong>单列数据</strong> 的集合，<strong>Map</strong> 是存储<strong>键和值</strong>这样的双列数据的集合；</p>\n<p><strong>List</strong> 中存储的数据是<strong>有顺序</strong>，并且允许<strong>重复</strong>；</p>\n<p><strong>Map</strong> 中存储的数据是<strong>无序</strong>的，其<strong>键</strong>是不能重复的，它的<strong>值</strong>是可以有重复的。</p>\n<p><strong>Set</strong> 中存储的数据是<strong>无序</strong>的，且不允许有重复。</p>\n<h4 id=\"hashmap-和-hashtable-有什么区别\"><a class=\"anchor\" href=\"#hashmap-和-hashtable-有什么区别\">#</a> HashMap 和 Hashtable 有什么区别？</h4>\n<ul>\n<li>存储：HashMap 允许 key 和 value 为  null，而 Hashtable 不允许。</li>\n<li>线程安全：Hashtable 是线程安全的，而 HashMap 是非线程安全的。</li>\n<li>推荐使用：在  Hashtable 的类注释可以看到，Hashtable 是保留类不建议使用，推荐在单线程环境下使用 HashMap 替代，如果需要多线程使用则用     ConcurrentHashMap 替代。</li>\n</ul>\n<h4 id=\"如何决定使用-hashmap-还是-treemap\"><a class=\"anchor\" href=\"#如何决定使用-hashmap-还是-treemap\">#</a> 如何决定使用 HashMap 还是 TreeMap？</h4>\n<p>对在 Map 中插入、删除、定位一个元素这类操作，HashMap 最好，因为相对而言 HashMap 的插入会更快</p>\n<p>对一个 key 集合进行有序的遍历，那 TreeMap 是更好的选择。</p>\n<h4 id=\"说一下-hashmap-的实现原理\"><a class=\"anchor\" href=\"#说一下-hashmap-的实现原理\">#</a> 说一下 HashMap 的实现原理？</h4>\n<p>HashMap 基于 Hash 算法实现的，我们通过 **put (key,value)** 存储，**get (key)** 来获取。</p>\n<p>当传入 key 时，HashMap 会根据 key. hashCode () 计算出 hash 值，根据 hash 值将 value 保存在 bucket 里。当计算出的 hash 值相同时，我们称之为 hash 冲突，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p>\n<h4 id=\"说一下-hashset-的实现原理\"><a class=\"anchor\" href=\"#说一下-hashset-的实现原理\">#</a> 说一下 HashSet 的实现原理？</h4>\n<p>HashSet 是基于 HashMap 实现的，底层使用 HashMap 来保存所有元素，HashSet 的实现比较简单，</p>\n<p>相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，HashSet 不允许重复的值。</p>\n<h4 id=\"arraylist-和-linkedlist-的区别是什么\"><a class=\"anchor\" href=\"#arraylist-和-linkedlist-的区别是什么\">#</a> ArrayList 和 LinkedList 的区别是什么？</h4>\n<ul>\n<li>数据结构实现：ArrayList  是<strong>动态数组</strong>的数据结构实现，而 LinkedList 是<strong>双向链表</strong>的数据结构实现。</li>\n<li>随机访问效率：ArrayList  比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。</li>\n<li>增加和删除效率：在非首尾的增加和删除操作，LinkedList 要比 ArrayList 效率要高，因为 ArrayList 增删操作要影响数组内的其他数据的下标。</li>\n</ul>\n<p>综合来说，在需要频繁读取集合中的元素时，更推荐使用 ArrayList.</p>\n<p>在插入和删除操作较多时，更推荐使用 LinkedList。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "容器"
            ]
        }
    ]
}