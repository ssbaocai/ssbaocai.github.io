{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"数据库\" tag",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/11/14/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/",
            "url": "https://www.baocai-blog.cn/2020/11/14/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/",
            "title": "MySql基础笔记",
            "date_published": "2020-11-14T08:40:27.178Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"数据库的基本概念\"><a class=\"anchor\" href=\"#数据库的基本概念\">#</a> 数据库的基本概念</h2>\n<pre><code>1. 数据库的英文单词： DataBase 简称 ： DB\n2. 什么数据库？\n\t* 用于存储和管理数据的仓库。\n\n3. 数据库的特点：\n\t1. 持久化存储数据的。其实数据库就是一个文件系统\n\t2. 方便存储和管理数据\n\t3. 使用了统一的方式操作数据库 -- SQL\n</code></pre>\n<h2 id=\"mysql数据库软件\"><a class=\"anchor\" href=\"#mysql数据库软件\">#</a> MySQL 数据库软件</h2>\n<pre><code>1. 安装\n\n2. 卸载\n\t1. 去mysql的安装目录找到my.ini文件\n\t\t* 复制 datadir=\"C:/ProgramData/MySQL/MySQL Server 5.5/Data/\"\n\t2. 卸载MySQL\n\t3. 删除C:/ProgramData目录下的MySQL文件夹。\n\t\n3. 配置\n\t* MySQL服务启动\n\t\t1. 手动。\n\t\t2. cmd--&gt; services.msc 打开服务的窗口\n\t\t3. 使用管理员打开cmd\n\t\t\t* net start mysql : 启动mysql的服务\n\t\t\t* net stop mysql:关闭mysql服务\n\t* MySQL登录\n\t\t1. mysql -uroot -p密码\n\t\t2. mysql -hip -uroot -p连接目标的密码\n\t\t3. mysql --host=ip --user=root --password=连接目标的密码\n\t* MySQL退出\n\t\t1. exit\n\t\t2. quit\n\n\t* MySQL目录结构\n\t\t1. MySQL安装目录：basedir=\"D:/develop/MySQL/\"\n\t\t\t* 配置文件 my.ini\n\t\t2. MySQL数据目录：datadir=\"C:/ProgramData/MySQL/MySQL Server 5.5/Data/\"\n\t\t\t* 几个概念\n\t\t\t\t* 数据库：文件夹\n\t\t\t\t* 表：文件\n\t\t\t\t* 数据：数据\n</code></pre>\n<h2 id=\"sql\"><a class=\"anchor\" href=\"#sql\">#</a> SQL</h2>\n<pre><code>1.什么是SQL？\n\tStructured Query Language：结构化查询语言\n\t其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。\n\t\n2.SQL通用语法\n\t1. SQL 语句可以单行或多行书写，以分号结尾。\n\t2. 可使用空格和缩进来增强语句的可读性。\n\t3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。\n\t4. 3 种注释\n\t\t* 单行注释: -- 注释内容 或 # 注释内容(mysql 特有) \n\t\t* 多行注释: /* 注释 */\n\t\n3. SQL分类\n\t1) DDL(Data Definition Language)数据定义语言\n\t\t用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等\n\t2) DML(Data Manipulation Language)数据操作语言\n\t\t用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等\n\t3) DQL(Data Query Language)数据查询语言\n\t\t用来查询数据库中表的记录(数据)。关键字：select, where 等\n\t4) DCL(Data Control Language)数据控制语言(了解)\n\t\t用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等\n</code></pre>\n<h2 id=\"ddl操作数据库-表\"><a class=\"anchor\" href=\"#ddl操作数据库-表\">#</a> DDL: 操作数据库、表</h2>\n<pre><code>1. 操作数据库：CRUD\n\t1. C(Create):创建\n\t\t* 创建数据库：\n\t\t\t* create database 数据库名称;\n\t\t* 创建数据库，判断不存在，再创建：\n\t\t\t* create database if not exists 数据库名称;\n\t\t* 创建数据库，并指定字符集\n\t\t\t* create database 数据库名称 character set 字符集名;\n\n\t\t* 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk\n\t\t\t* create database if not exists db4 character set gbk;\n\t2. R(Retrieve)：查询\n\t\t* 查询所有数据库的名称:\n\t\t\t* show databases;\n\t\t* 查询某个数据库的字符集:查询某个数据库的创建语句\n\t\t\t* show create database 数据库名称;\n\t3. U(Update):修改\n\t\t* 修改数据库的字符集\n\t\t\t* alter database 数据库名称 character set 字符集名称;\n\t4. D(Delete):删除\n\t\t* 删除数据库\n\t\t\t* drop database 数据库名称;\n\t\t* 判断数据库存在，存在再删除\n\t\t\t* drop database if exists 数据库名称;\n\t5. 使用数据库\n\t\t* 查询当前正在使用的数据库名称\n\t\t\t* select database();\n\t\t* 使用数据库\n\t\t\t* use 数据库名称;\n\n\n2. 操作表\n\t1. C(Create):创建\n\t\t1. 语法：\n\t\t\tcreate table 表名(\n\t\t\t\t列名1 数据类型1,\n\t\t\t\t列名2 数据类型2,\n\t\t\t\t....\n\t\t\t\t列名n 数据类型n\n\t\t\t);\n\t\t\t* 注意：最后一列，不需要加逗号（,）\n\t\t\t* 数据库类型：\n\t\t\t\t1. int：整数类型\n\t\t\t\t\t* age int,\n\t\t\t\t2. double:小数类型\n\t\t\t\t\t* score double(5,2)\n\t\t\t\t3. date:日期，只包含年月日，yyyy-MM-dd\n\t\t\t\t4. datetime:日期，包含年月日时分秒\t yyyy-MM-dd HH:mm:ss\n\t\t\t\t5. timestamp:时间错类型\t包含年月日时分秒\t yyyy-MM-dd HH:mm:ss\t\n\t\t\t\t\t* 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值\n\n\t\t\t\t6. varchar：字符串\n\t\t\t\t\t* name varchar(20):姓名最大20个字符\n\t\t\t\t\t* zhangsan 8个字符  张三 2个字符\n\n\n\t\t* 创建表\n\t\t\tcreate table student(\n\t\t\t\tid int,\n\t\t\t\tname varchar(32),\n\t\t\t\tage int ,\n\t\t\t\tscore double(4,1),\n\t\t\t\tbirthday date,\n\t\t\t\tinsert_time timestamp\n\t\t\t);\n\t\t* 复制表：\n\t\t\t* create table 表名 like 被复制的表名;\t  \t\n\t2. R(Retrieve)：查询\n\t\t* 查询某个数据库中所有的表名称\n\t\t\t* show tables;\n\t\t* 查询表结构\n\t\t\t* desc 表名;\n\t3. U(Update):修改\n\t\t1. 修改表名\n\t\t\talter table 表名 rename to 新的表名;\n\t\t2. 修改表的字符集\n\t\t\talter table 表名 character set 字符集名称;\n\t\t3. 添加一列\n\t\t\talter table 表名 add 列名 数据类型;\n\t\t4. 修改列名称 类型\n\t\t\talter table 表名 change 列名 新列别 新数据类型;\n\t\t\talter table 表名 modify 列名 新数据类型;\n\t\t5. 删除列\n\t\t\talter table 表名 drop 列名;\n\t4. D(Delete):删除\n\t\t* drop table 表名;\n\t\t* drop table  if exists 表名 ;\n</code></pre>\n<h2 id=\"dml增删改表中数据\"><a class=\"anchor\" href=\"#dml增删改表中数据\">#</a> DML：增删改表中数据</h2>\n<pre><code>1. 添加数据：\n\t* 语法：\n\t\t* insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);\n\t* 注意：\n\t\t1. 列名和值要一一对应。\n\t\t2. 如果表名后，不定义列名，则默认给所有列添加值\n\t\t\tinsert into 表名 values(值1,值2,...值n);\n\t\t3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来\n2. 删除数据：\n\t* 语法：\n\t\t* delete from 表名 [where 条件]\n\t* 注意：\n\t\t1. 如果不加条件，则删除表中所有记录。\n\t\t2. 如果要删除所有记录\n\t\t\t1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n\t\t\t2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。\n3. 修改数据：\n\t* 语法：\n\t\t* update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];\n\n\t* 注意：\n\t\t1. 如果不加任何条件，则会将表中所有记录全部修改。\n</code></pre>\n<h2 id=\"dql查询表中的记录\"><a class=\"anchor\" href=\"#dql查询表中的记录\">#</a> DQL：查询表中的记录</h2>\n<pre><code>* select * from 表名;\n\n1. 语法：\n\tselect\n\t\t字段列表\n\tfrom\n\t\t表名列表\n\twhere\n\t\t条件列表\n\tgroup by\n\t\t分组字段\n\thaving\n\t\t分组之后的条件\n\torder by\n\t\t排序\n\tlimit\n\t\t分页限定\n\n\n2. 基础查询\n\t1. 多个字段的查询\n\t\tselect 字段名1，字段名2... from 表名；\n\t\t* 注意：\n\t\t\t* 如果查询所有字段，则可以使用*来替代字段列表。\n\t2. 去除重复：\n\t\t* distinct\n\t3. 起别名：\n\t\t* as：as也可以省略\n\n\n3. 条件查询\n\t1. where子句后跟条件\n\t2. 运算符\n\t\t* &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;\n\t\t* BETWEEN...AND  \n\t\t* IN( 集合) \n\t\t* LIKE：模糊查询\n\t\t\t* 占位符：\n\t\t\t\t* _:单个任意字符\n\t\t\t\t* %：多个任意字符\n\t\t* IS NULL  \n\t\t* and  或 &amp;&amp;\n\t\t* or  或 || \n\t\t* not  或 !\n\t\t\n\t\t\t-- 查询年龄大于20岁\n\n\t\t\tSELECT * FROM student WHERE age &gt; 20;\n\t\t\t\n\t\t\tSELECT * FROM student WHERE age &gt;= 20;\n\t\t\t\n\t\t\t-- 查询年龄等于20岁\n\t\t\tSELECT * FROM student WHERE age = 20;\n\t\t\t\n\t\t\t-- 查询年龄不等于20岁\n\t\t\tSELECT * FROM student WHERE age != 20;\n\t\t\tSELECT * FROM student WHERE age &lt;&gt; 20;\n\t\t\t\n\t\t\t-- 查询年龄大于等于20 小于等于30\n\t\t\t\n\t\t\tSELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;\n\t\t\tSELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;\n\t\t\tSELECT * FROM student WHERE age BETWEEN 20 AND 30;\n\t\t\t\n\t\t\t-- 查询年龄22岁，18岁，25岁的信息\n\t\t\tSELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25\n\t\t\tSELECT * FROM student WHERE age IN (22,18,25);\n\t\t\t\n\t\t\t-- 查询英语成绩为null\n\t\t\tSELECT * FROM student WHERE english = NULL; \n\t\t\t-- 不对的。null值不能使用 = （!=） 判断\n\t\t\t\n\t\t\tSELECT * FROM student WHERE english IS NULL;\n\t\t\t\n\t\t\t-- 查询英语成绩不为null\n\t\t\tSELECT * FROM student WHERE english  IS NOT NULL;\n\n\n\n\t\t\t-- 查询姓马的有哪些？ like\n\t\t\tSELECT * FROM student WHERE NAME LIKE '马%';\n\t\t\t-- 查询姓名第二个字是化的人\n\t\t\t\n\t\t\tSELECT * FROM student WHERE NAME LIKE \"_化%\";\n\t\t\t\n\t\t\t-- 查询姓名是3个字的人\n\t\t\tSELECT * FROM student WHERE NAME LIKE '___';\n\t\t\t-- 查询姓名中包含德的人\n\t\t\tSELECT * FROM student WHERE NAME LIKE '%德%';\n</code></pre>\n<p>​</p>\n<p>​</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "https://www.baocai-blog.cn/2020/10/13/MySQL/",
            "url": "https://www.baocai-blog.cn/2020/10/13/MySQL/",
            "title": "MySQL",
            "date_published": "2020-10-13T13:43:55.195Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h1>\n<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<h3 id=\"数据库的三范式是什么\"><a class=\"anchor\" href=\"#数据库的三范式是什么\">#</a> 数据库的三范式是什么？</h3>\n<ul>\n<li>第一范式：强调的是原子性，即数据库表的每一列都是不可分割的原子数据项。</li>\n<li>第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。</li>\n<li>第三范式：任何非主属性不依赖于其它非主属性。</li>\n</ul>\n<h3 id=\"mysql-的内连接-左连接-右连接有什么区别\"><a class=\"anchor\" href=\"#mysql-的内连接-左连接-右连接有什么区别\">#</a> MySQL 的内连接、左连接、右连接有什么区别？</h3>\n<p>内连接关键字：inner join；左连接：left join；右连接：right join。</p>\n<p>内连接是把匹配的关联数 据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。</p>\n<h3 id=\"数据库基本操作语句\"><a class=\"anchor\" href=\"#数据库基本操作语句\">#</a> 数据库基本操作语句</h3>\n<p>主键约束 (primary key)  唯一约束 (unique) 非空约束 (not null) 外键约束 (foreign key)</p>\n<p><strong>select</strong> ... from 表名  where 条件  group by  分组字段  having 条件  order by  排序字段 ase|desc</p>\n<p>去重操作<strong> distinct</strong>             select distinct 字段名，字段名 2 from 表名</p>\n<p><strong>insert  into  &lt;表名&gt;  [列名]  values  &lt; 列值 &gt;                delete  from  &lt; 表名 &gt;  where  &lt; 删除条件 &gt;</strong>**</p>\n<p><strong>update 表名 set  字段名 = 字段值，字段名 = 字段值   [where 修改条件];</strong></p>\n<h2 id=\"数据库特性\"><a class=\"anchor\" href=\"#数据库特性\">#</a> 数据库特性</h2>\n<h3 id=\"数据库4个特性\"><a class=\"anchor\" href=\"#数据库4个特性\">#</a> 数据库 4 个特性：</h3>\n<ul>\n<li>Atomicity（<strong>原子性</strong>）：事务不可分割、不可约简。</li>\n<li>Consistency（<strong>一致性</strong>）：在事务开始前和事务结束后，<strong>数据库的完整性</strong>没有被破坏。</li>\n<li>Isolation（<strong>隔离性</strong>）：数据库允许多个事务同时对数据处理，隔离性可以<strong>防止</strong>多个事务并发执行时由于交叉执行而<strong>导致数据的不一致</strong>。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>\n<li>Durability（<strong>持久性</strong>）：事务处理结束后，对数据的修改就是永久，不会丢失。</li>\n</ul>\n<h2 id=\"事务隔离\"><a class=\"anchor\" href=\"#事务隔离\">#</a> 事务隔离</h2>\n<h3 id=\"数据库的事务隔离\"><a class=\"anchor\" href=\"#数据库的事务隔离\">#</a> 数据库的事务隔离：</h3>\n<ul>\n<li>\n<p>READ-UNCOMMITTED：<strong>未提交读</strong>，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。</p>\n</li>\n<li>\n<p>READ-COMMITTED：<strong>提交读</strong>，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。</p>\n</li>\n<li>\n<p>REPEATABLE-READ：<strong>可重复读</strong>，<strong>默认</strong>级别，保证多次读取同一个数据，值和内容一致。禁止读取到别的事务未提交的数据（会造成幻读）。</p>\n</li>\n<li>\n<p>SERIALIZABLE：<strong>序列化</strong>，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</p>\n<p><strong>脏读</strong> ：表示一个事务能够读取另一个事务中还未提交的数据。<strong>不可重复读</strong> ：是指在一个事务内，多次读同一数据。</p>\n</li>\n</ul>\n<h2 id=\"分页查询\"><a class=\"anchor\" href=\"#分页查询\">#</a> 分页查询</h2>\n<h3 id=\"oracle页查询\"><a class=\"anchor\" href=\"#oracle页查询\">#</a> <strong>Oracle 页查询</strong></h3>\n<p>Oracle 中使用 rownum 来进行分页，</p>\n<p>select * from    ( select rownum r,a from tabName where rownum &lt;= 20 )  where r &gt; 10</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "数据库"
            ]
        }
    ]
}