{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"java\" tag",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/10/04/%E5%9F%BA%E7%A1%80/",
            "url": "https://www.baocai-blog.cn/2020/10/04/%E5%9F%BA%E7%A1%80/",
            "title": "Java基础",
            "date_published": "2020-10-04T06:58:46.815Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"string-和-stringbuffer-stringbuilder-的区别\"><a class=\"anchor\" href=\"#string-和-stringbuffer-stringbuilder-的区别\">#</a> <strong>String 和 StringBuffer、StringBuilder</strong> 的区别：</h4>\n<p>String 声明的是<strong>不可变</strong>的对象，StringBuffer、StringBuilder 可以在原有对象的基础上进行操作。</p>\n<p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是<strong>线程安全的</strong>，但 StringBuilder 的性能却高于 StringBuffer，所以在<strong>单线程</strong>环境下推荐使用 StringBuilder，<strong>多线程</strong>环境下推荐使用 StringBuffer。</p>\n<h4 id=\"方法重载与方法重写\"><a class=\"anchor\" href=\"#方法重载与方法重写\">#</a> 方法重载与方法重写</h4>\n<ul>\n<li>\n<p><strong>方法重写：</strong></p>\n<p>重写是子类对父类的允许访问的方法的<strong>实现过程</strong>进行重新编写，<strong>返回值</strong>和<strong>形参</strong>都不能改变。</p>\n</li>\n<li>\n<p><strong>方法重载：</strong></p>\n<p>在一个类中，方法名相同，参数不同。返回类型可以相同也可以不同。</p>\n</li>\n<li>\n<p><strong>区别：</strong></p>\n<p><strong>方法重载</strong>是一个类中定义了多个方法名相同，而他们的<strong>参数</strong>的数量不同或数量相同而<strong>类型</strong>和<strong>顺序</strong>不同，则称为方法的重载。</p>\n<p><strong>方法重写</strong>是在子类存在方法与父类的<strong>方法名</strong>相同，而且<strong>参数</strong>的个数与类型一样，<strong> 返回值</strong>也一样的方法，就称为重写。</p>\n</li>\n</ul>\n<h4 id=\"接口和抽象类有什么区别\"><a class=\"anchor\" href=\"#接口和抽象类有什么区别\">#</a> 接口和抽象类有什么区别？</h4>\n<ul>\n<li>实现：抽象类的子类使用  extends 来继承；接口必须使用 implements 来实现接口。</li>\n<li>构造函数：抽象类可以有构造函数；接口不能有。</li>\n<li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li>\n<li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li>\n</ul>\n<h4 id=\"静态变量和实例变量\"><a class=\"anchor\" href=\"#静态变量和实例变量\">#</a> 静态变量和实例变量</h4>\n<p>** 静态变量：** 独立存在，属于类所有，可以直接类名加点调用静态变量名使用。</p>\n<p><strong>实例变量</strong>：需要先初始化该类，就是 new 该类后，才可以调用。但是该类被垃圾回收器回收后，该实例也将不存在。</p>\n<p><strong>区别：</strong></p>\n<ul>\n<li>\n<p>1. 存储区域不同：静态变量存储在<strong>方法区</strong>，普通变量存储在<strong>堆</strong>中；</p>\n</li>\n<li>\n<p>2. 静态变量与类相关，普通变量则与实例相关</p>\n</li>\n<li>\n<p>3. 内存分配方式不同。</p>\n</li>\n<li>\n<p>4. 生命周期不同。</p>\n</li>\n</ul>\n<h4 id=\"和的区别\"><a class=\"anchor\" href=\"#和的区别\">#</a> &amp; 和 &amp;&amp; 的区别</h4>\n<p>&amp; 运算符有两种用法：(1) 按位与；(2) 逻辑与。</p>\n<p>&amp;&amp; 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。&amp;&amp; 之所以称为短路运算，是因为如果 &amp;&amp; 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。</p>\n<h4 id=\"final-有什么用\"><a class=\"anchor\" href=\"#final-有什么用\">#</a> final 有什么用？</h4>\n<p>用于修饰类、属性和方法；</p>\n<ul>\n<li>被 final 修饰的类不可以被继承</li>\n<li>被 final 修饰的方法不可以被重写</li>\n<li>被 final 修饰的变量不可以被改变，被 final 修饰不可变的是变量的引用，而不是引用指向的内容，引用指向的内容是可以改变的</li>\n</ul>\n<h4 id=\"final-finally-finalize区别\"><a class=\"anchor\" href=\"#final-finally-finalize区别\">#</a> final finally finalize 区别</h4>\n<ul>\n<li>final 可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表<br>\n示该变量是一个常量不能被重新赋值。</li>\n<li>finally 一般作用在 try-catch 代码块中，在处理异常的时候，通常我们将一定要执行的代码方法 finally 代码块<br>\n中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li>\n<li>finalize 是一个方法，属于 Object 类的一个方法，而 Object 类是所有类的父类，该方法一般由垃圾回收器来调<br>\n用，当我们调用 System.gc () 方法的时候，由垃圾回收器调用 finalize ()，回收垃圾，一个对象是否可回收的<br>\n最后判断。</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "Java"
            ]
        }
    ]
}