<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>手撕包菜 • Posts by &#34;设计模式&#34; tag</title>
        <link>https://www.baocai-blog.cn</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 04 Oct 2020 14:58:46 +0800</pubDate>
        <lastBuildDate>Sun, 04 Oct 2020 14:58:46 +0800</lastBuildDate>
        <category>MyBatis</category>
        <category>MySQL</category>
        <category>Java</category>
        <category>Spring</category>
        <category>多线程</category>
        <category>容器</category>
        <category>设计模式</category>
        <item>
            <guid isPermalink="true">https://www.baocai-blog.cn/2020/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
            <title>设计模式</title>
            <link>https://www.baocai-blog.cn/2020/10/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
            <category>设计模式</category>
            <pubDate>Sun, 04 Oct 2020 14:58:46 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;熟悉的设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#熟悉的设计模式&#34;&gt;#&lt;/a&gt; 熟悉的设计模式？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单例模式：保证被创建一次，节省系统开销。&lt;/li&gt;
&lt;li&gt;工厂模式（简单工厂、抽象工厂）：解耦代码。&lt;/li&gt;
&lt;li&gt;观察者模式：定义了对象之间的一对多的依赖，这样一来，当一个对象改变时，它的所有的依赖者都会收到通知并自动更新。&lt;/li&gt;
&lt;li&gt;外观模式：提供一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层的接口，让子系统更容易使用。&lt;/li&gt;
&lt;li&gt;模版方法模式：定义了一个算法的骨架，而将一些步骤延迟到子类中，模版方法使得子类可以在不改变算法结构的情况下，重新定义算法的步骤。&lt;/li&gt;
&lt;li&gt;状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
