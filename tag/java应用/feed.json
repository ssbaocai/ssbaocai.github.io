{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"java应用\" tag",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/11/08/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/",
            "url": "https://www.baocai-blog.cn/2020/11/08/Java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/",
            "title": "Java中的常用算法",
            "date_published": "2020-11-08T07:10:22.463Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"java中的常用算法\"><a class=\"anchor\" href=\"#java中的常用算法\">#</a> Java 中的常用算法</h1>\n<h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<p>冒泡排序算法是把较小的元素往前调或者把较大的元素往后调。这种方法主要是通过对相邻两个元素进行大小的比较，根据比较结果和算法规则对该二元素的位置进行交换，这样逐个依次进行比较和交换，就能达到排序目的。<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE2MzcwODE4Ni0xNzAzNjAxNDQ4LmdpZg==\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531163708186-1703601448.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>通过每一次遍历获取最大 / 最小值</p>\n</li>\n<li>\n<p>将最大值 / 最小值放在尾部 / 头部</p>\n</li>\n<li>\n<p>然后除开最大值 / 最小值，剩下的数据在进行遍历获取最大 / 最小值</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n   int arr[] = {8, 5, 3, 2, 4};\n    //冒泡\n    for (int i = 0; i &lt; arr.length; i++) {\n        //外层循环，遍历次数\n        for (int j = 0; j &lt; arr.length - i - 1; j++) {\n            //内层循环，升序（如果前一个值比后一个值大，则交换）\n            //内层循环一次，获取一个最大值\n            if (arr[j] &gt; arr[j + 1]) {\n                int temp = arr[j + 1];\n                arr[j + 1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程（红色：移动的数据）</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\maopao.jpg\" alt=\"alt\" style=\"zoom: 80%;\" /&gt;</p>\n</li>\n</ol>\n<h2 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h2>\n<p>选择排序算法的基本思路是为每一个位置选择当前最小的元素。选择排序的基本思想是，基于直接选择排序和堆排序这两种基本的简单排序方法。首先从第 1 个位置开始对全部元素进行选择，选出全部元素中最小的给该位置，再对第 2 个位置进行选择，在剩余元素中选择最小的给该位置即可；<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3MDIwNTgyMS0xOTgzNjc4NjQzLmdpZg==\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531170205821-1983678643.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>将第一个值看成最小值</p>\n</li>\n<li>\n<p>然后和后续的比较找出最小值和下标</p>\n</li>\n<li>\n<p>交换本次遍历的起始值和最小值</p>\n</li>\n<li>\n<p>说明：每次遍历的时候，将前面找出的最小值，看成一个有序的列表，后面的看成无序的列表，然后每次遍历无序列表找出最小值。</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n   int arr[] = {6, 5, 3, 2, 4};\n    //选择\n    for (int i = 0; i &lt; arr.length; i++) {\n        //默认第一个是最小的。\n        int min = arr[i];\n        //记录最小的下标\n        int index = i;\n        //通过与后面的数据进行比较得出，最小值和下标\n        for (int j = i + 1; j &lt; arr.length; j++) {\n            if (min &gt; arr[j]) {\n                min = arr[j];\n                index = j;\n            }\n        }\n        //然后将最小值与本次循环的，开始值交换\n        int temp = arr[i];\n        arr[i] = min;\n        arr[index] = temp;\n        //说明：将i前面的数据看成一个排好的队列，i后面的看成一个无序队列。每次只需要找无需的最小值，做替换\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程（红色：移动的数据）</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\xuanze.jpg\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n</li>\n</ol>\n<h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2>\n<p>插入排序算法是基于某序列已经有序排列的情况下，通过一次插入一个元素的方式按照原有排序方式增加元素。<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3MDk1MzI4My0xODA2MTUzMzMxLmdpZg==\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531170953283-1806153331.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>默认从第二个数据开始比较。</p>\n</li>\n<li>\n<p>如果第二个数据比第一个小，则交换。然后在用第三个数据比较，如果比前面小，则插入（狡猾）。否则，退出循环</p>\n</li>\n<li>\n<p>说明：默认将第一数据看成有序列表，后面无序的列表循环每一个数据，如果比前面的数据小则插入（交换）。否则退出。</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n int arr[] = {7, 5, 3, 2, 4};\n\n//插入排序\nfor (int i = 1; i &lt; arr.length; i++) {\n    //外层循环，从第二个开始比较\n    for (int j = i; j &gt; 0; j--) {\n        //内存循环，与前面排好序的数据比较，如果后面的数据小于前面的则交换\n        if (arr[j] &lt; arr[j - 1]) {\n            int temp = arr[j - 1];\n            arr[j - 1] = arr[j];\n            arr[j] = temp;\n        } else {\n            //如果不小于，说明插入完毕，退出内层循环\n            break;\n        }\n    }\n}\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程（红色：有序，黑色：无序）</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\charu.jpg\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n</li>\n</ol>\n<h2 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<p>快速排序的基本思想是：通过一趟排序算法把所需要排序的序列的元素分割成两大块，其中，一部分的元素都要小于或等于另外一部分的序列元素，然后仍根据该种方法对划分后的这两块序列的元素分别再次实行快速排序算法，排序实现的整个过程可以是递归的来进行调用，最终能够实现将所需排序的无序序列元素变为一个有序的序列。<br>\n&lt;img src=\"<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTAzMTg0MS8yMDE5MDUvMTAzMTg0MS0yMDE5MDUzMTE3NTcwOTUxNS0xNjk2MDI2MjkuZ2lm\">https://img2018.cnblogs.com/blog/1031841/201905/1031841-20190531175709515-169602629.gif</span>\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n<ol>\n<li>\n<p>确认列表第一个数据为中间值，第一个值看成空缺（低指针空缺）。</p>\n</li>\n<li>\n<p>然后在剩下的队列中，看成有左右两个指针（高低）。</p>\n</li>\n<li>\n<p>开始高指针向左移动，如果遇到小于中间值的数据，则将这个数据赋值到低指针空缺，并且将高指针的数据看成空缺值（高指针空缺）。然后先向右移动一下低指针，并且切换低指针移动。</p>\n</li>\n<li>\n<p>当低指针移动到大于中间值的时候，赋值到高指针空缺的地方。然后先高指针向左移动，并且切换高指针移动。重复 c、d 操作。</p>\n</li>\n<li>\n<p>直到高指针和低指针相等时退出，并且将中间值赋值给对应指针位置。</p>\n</li>\n<li>\n<p>然后将中间值的左右两边看成行的列表，进行快速排序操作。</p>\n</li>\n<li>\n<p>代码实现</p>\n<pre><code>public static void main(String[] args) {\n\n    int arr[] = {7, 5, 3, 2, 4, 1, 8, 9, 6};\n\n    //快速排序\n    int low = 0;\n    int high = arr.length - 1;\n    quickSort(arr, low, high);  \n}\n\npublic static void quickSort(int[] arr, int low, int high) {\n    //如果指针在同一位置(只有一个数据时)，退出\n    if (high - low &lt; 1) {\n        return;\n    }\n    //标记，从高指针开始，还是低指针（默认高指针）\n    boolean flag = true;\n    //记录指针的其实位置\n    int start = low;\n    int end = high;\n    //默认中间值为低指针的第一个值\n    int midValue = arr[low];\n    while (true) {\n        //高指针移动\n        if (flag) {\n            //如果列表右方的数据大于中间值，则向左移动\n            if (arr[high] &gt; midValue) {\n                high--;\n            } else if (arr[high] &lt; midValue) {\n                //如果小于，则覆盖最开始的低指针值，并且移动低指针，标志位改成从低指针开始移动\n                arr[low] = arr[high];\n                low++;\n                flag = false;\n            }\n        } else {\n            //如果低指针数据小于中间值，则低指针向右移动\n            if (arr[low] &lt; midValue) {\n                low++;\n            } else if (arr[low] &gt; midValue) {\n            \t//如果低指针的值大于中间值，则覆盖高指针停留时的数据，并向左移动高指针。切换为高指针移动\n                arr[high] = arr[low];\n                high--;\n                flag = true;\n            }\n        }\n        //当两个指针的位置相同时，则找到了中间值的位置，并退出循环\n        if (low == high) {\n            arr[low] = midValue;\n            break;\n        }\n    }\n    //然后出现有，中间值左边的小于中间值。右边的大于中间值。\n    //然后在对左右两边的列表在进行快速排序\n    quickSort(arr, start, low -1);\n    quickSort(arr, low + 1, end);\n}\n</code></pre>\n</li>\n<li>\n<p>排序过程 (橙色：中间值，蓝色：确认位置的数据，红色：移动的数据)</p>\n<p>&lt;img src=\"D:\\Program Files\\blog\\hexo\\source\\images\\kuaisu.jpg\" alt=\"alt\" style=\"zoom:80%;\" /&gt;</p>\n</li>\n</ol>\n<p>转载出处：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGw0MDk1NDYyOTcvcC8xMDk1Njk2MC5odG1s\">https://www.cnblogs.com/ll409546297/p/10956960.html</span></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "Java应用"
            ]
        }
    ]
}