{
    "version": "https://jsonfeed.org/version/1",
    "title": "手撕包菜 • All posts by \"mysql\" tag",
    "description": "",
    "home_page_url": "https://www.baocai-blog.cn",
    "items": [
        {
            "id": "https://www.baocai-blog.cn/2020/09/30/MySQL%E5%9F%BA%E7%A1%80/",
            "url": "https://www.baocai-blog.cn/2020/09/30/MySQL%E5%9F%BA%E7%A1%80/",
            "title": "MySQL基础",
            "date_published": "2020-09-29T16:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h1>\n<ol>\n<li>\n<p>数据库的基本概念</p>\n</li>\n<li>\n<p>MySQL 数据库软件</p>\n<ol>\n<li>安装</li>\n<li>卸载</li>\n<li>配置</li>\n</ol>\n</li>\n<li>\n<p>SQL</p>\n</li>\n</ol>\n<h2 id=\"数据库的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#数据库的基本概念\">#</a> 数据库的基本概念</h2>\n<ol>\n<li>\n<p>数据库的英文单词： DataBase 简称 ： DB</p>\n</li>\n<li>\n<p>什么数据库？</p>\n<ul>\n<li>用于存储和管理数据的仓库。</li>\n</ul>\n</li>\n<li>\n<p>数据库的特点：</p>\n<ol>\n<li>持久化存储数据的。其实数据库就是一个文件系统</li>\n<li>方便存储和管理数据</li>\n<li>使用了统一的方式操作数据库 – SQL</li>\n</ol>\n</li>\n</ol>\n<p>​\t<br>\n4. 常见的数据库软件<br>\n * 参见《MySQL 基础.pdf》</p>\n<h2 id=\"mysql数据库软件\"><a class=\"markdownIt-Anchor\" href=\"#mysql数据库软件\">#</a> MySQL 数据库软件</h2>\n<ol>\n<li>\n<p>安装</p>\n<ul>\n<li>参见《MySQL 基础.pdf》</li>\n</ul>\n</li>\n<li>\n<p>卸载</p>\n<ol>\n<li>去 mysql 的安装目录找到 my.ini 文件\n<ul>\n<li>复制 datadir=“C:/ProgramData/MySQL/MySQL Server 5.5/Data/”</li>\n</ul>\n</li>\n<li>卸载 MySQL</li>\n<li>删除 C:/ProgramData 目录下的 MySQL 文件夹。</li>\n</ol>\n</li>\n<li>\n<p>配置</p>\n<ul>\n<li>\n<p>MySQL 服务启动</p>\n<ol>\n<li>手动。</li>\n<li>cmd–&gt; services.msc 打开服务的窗口</li>\n<li>使用管理员打开 cmd\n<ul>\n<li>net start mysql : 启动 mysql 的服务</li>\n<li>net stop mysql: 关闭 mysql 服务</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>MySQL 登录</p>\n<ol>\n<li>mysql -uroot -p 密码</li>\n<li>mysql -hip -uroot -p 连接目标的密码</li>\n<li>mysql --host=ip --user=root --password = 连接目标的密码</li>\n</ol>\n</li>\n<li>\n<p>MySQL 退出</p>\n<ol>\n<li>exit</li>\n<li>quit</li>\n</ol>\n</li>\n<li>\n<p>MySQL 目录结构</p>\n<ol>\n<li>MySQL 安装目录：basedir=“D:/develop/MySQL/”\n<ul>\n<li>配置文件 my.ini</li>\n</ul>\n</li>\n<li>MySQL 数据目录：datadir=“C:/ProgramData/MySQL/MySQL Server 5.5/Data/”\n<ul>\n<li>几个概念\n<ul>\n<li>数据库：文件夹</li>\n<li>表：文件</li>\n<li>数据：数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"sql\"><a class=\"markdownIt-Anchor\" href=\"#sql\">#</a> SQL</h2>\n<p>1. 什么是 SQL？<br>\nStructured Query Language：结构化查询语言<br>\n其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为 “方言”。</p>\n<p>2.SQL 通用语法</p>\n<ol>\n<li>\n<p>SQL 语句可以单行或多行书写，以分号结尾。</p>\n</li>\n<li>\n<p>可使用空格和缩进来增强语句的可读性。</p>\n</li>\n<li>\n<p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p>\n</li>\n<li>\n<p>3 种注释</p>\n<ul>\n<li>单行注释: – 注释内容 或 # 注释内容 (mysql 特有)</li>\n<li>多行注释: /* 注释 */</li>\n</ul>\n</li>\n<li>\n<p>SQL 分类</p>\n<ol>\n<li>DDL (Data Definition Language) 数据定义语言<br>\n用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</li>\n<li>DML (Data Manipulation Language) 数据操作语言<br>\n用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li>\n<li>DQL (Data Query Language) 数据查询语言<br>\n用来查询数据库中表的记录 (数据)。关键字：select, where 等</li>\n<li>DCL (Data Control Language) 数据控制语言 (了解)<br>\n 用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"ddl操作数据库-表\"><a class=\"markdownIt-Anchor\" href=\"#ddl操作数据库-表\">#</a> DDL: 操作数据库、表</h2>\n<ol>\n<li>\n<p>操作数据库：CRUD</p>\n<ol>\n<li>C (Create): 创建\n<ul>\n<li>\n<p>创建数据库：</p>\n<ul>\n<li>create database 数据库名称；</li>\n</ul>\n</li>\n<li>\n<p>创建数据库，判断不存在，再创建：</p>\n<ul>\n<li>create database if not exists 数据库名称；</li>\n</ul>\n</li>\n<li>\n<p>创建数据库，并指定字符集</p>\n<ul>\n<li>create database 数据库名称 character set 字符集名；</li>\n</ul>\n</li>\n<li>\n<p>练习： 创建 db4 数据库，判断是否存在，并制定字符集为 gbk</p>\n<ul>\n<li>create database if not exists db4 character set gbk;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>R (Retrieve)：查询\n<ul>\n<li>查询所有数据库的名称:\n<ul>\n<li>show databases;</li>\n</ul>\n</li>\n<li>查询某个数据库的字符集：查询某个数据库的创建语句\n<ul>\n<li>show create database 数据库名称；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>U (Update): 修改\n<ul>\n<li>修改数据库的字符集\n<ul>\n<li>alter database 数据库名称 character set 字符集名称；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>D (Delete): 删除\n<ul>\n<li>删除数据库\n<ul>\n<li>drop database 数据库名称；</li>\n</ul>\n</li>\n<li>判断数据库存在，存在再删除\n<ul>\n<li>drop database if exists 数据库名称；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用数据库\n<ul>\n<li>查询当前正在使用的数据库名称\n<ul>\n<li>select database();</li>\n</ul>\n</li>\n<li>使用数据库\n<ul>\n<li>use 数据库名称；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>操作表</p>\n<ol>\n<li>\n<p>C (Create): 创建</p>\n<ol>\n<li>语法：<br>\ncreate table 表名 (<br>\n列名 1 数据类型 1,<br>\n 列名 2 数据类型 2,<br>\n…<br>\n 列名 n 数据类型 n<br>\n);\n<ul>\n<li>注意：最后一列，不需要加逗号（,）</li>\n<li>数据库类型：\n<ol>\n<li>\n<p>int：整数类型</p>\n<ul>\n<li>age int,</li>\n</ul>\n</li>\n<li>\n<p>double: 小数类型</p>\n<ul>\n<li>score double(5,2)</li>\n</ul>\n</li>\n<li>\n<p>date: 日期，只包含年月日，yyyy-MM-dd</p>\n</li>\n<li>\n<p>datetime: 日期，包含年月日时分秒\t yyyy-MM-dd HH:mm:ss</p>\n</li>\n<li>\n<p>timestamp: 时间错类型\t包含年月日时分秒\t yyyy-MM-dd HH:mm:ss</p>\n<ul>\n<li>如果将来不给这个字段赋值，或赋值为 null，则默认使用当前的系统时间，来自动赋值</li>\n</ul>\n</li>\n<li>\n<p>varchar：字符串</p>\n<ul>\n<li>name varchar (20): 姓名最大 20 个字符</li>\n<li>zhangsan 8 个字符  张三 2 个字符</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>创建表<br>\n create table student (<br>\nid int,<br>\nname varchar(32),<br>\nage int ,<br>\nscore double(4,1),<br>\nbirthday date,<br>\ninsert_time timestamp<br>\n);</li>\n<li>复制表：\n<ul>\n<li>create table 表名 like 被复制的表名；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>R (Retrieve)：查询</p>\n<ul>\n<li>查询某个数据库中所有的表名称\n<ul>\n<li>show tables;</li>\n</ul>\n</li>\n<li>查询表结构\n<ul>\n<li>desc 表名；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>U (Update): 修改</p>\n<ol>\n<li>修改表名<br>\n alter table 表名 rename to 新的表名；</li>\n<li>修改表的字符集<br>\n alter table 表名 character set 字符集名称；</li>\n<li>添加一列<br>\n alter table 表名 add 列名 数据类型；</li>\n<li>修改列名称 类型<br>\n alter table 表名 change 列名 新列别 新数据类型；<br>\nalter table 表名 modify 列名 新数据类型；</li>\n<li>删除列<br>\n alter table 表名 drop 列名；</li>\n</ol>\n</li>\n<li>\n<p>D (Delete): 删除</p>\n<ul>\n<li>drop table 表名；</li>\n<li>drop table  if exists 表名；</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>客户端图形化工具：SQLYog</li>\n</ul>\n<h2 id=\"dml增删改表中数据\"><a class=\"markdownIt-Anchor\" href=\"#dml增删改表中数据\">#</a> DML：增删改表中数据</h2>\n<ol>\n<li>添加数据：\n<ul>\n<li>语法：\n<ul>\n<li>insert into 表名 (列名 1, 列名 2,… 列名 n) values (值 1, 值 2,… 值 n);</li>\n</ul>\n</li>\n<li>注意：\n<ol>\n<li>列名和值要一一对应。</li>\n<li>如果表名后，不定义列名，则默认给所有列添加值<br>\n insert into 表名 values (值 1, 值 2,… 值 n);</li>\n<li>除了数字类型，其他类型需要使用引号 (单双都可以) 引起来</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>删除数据：\n<ul>\n<li>语法：\n<ul>\n<li>delete from 表名 [where 条件]</li>\n</ul>\n</li>\n<li>注意：\n<ol>\n<li>如果不加条件，则删除表中所有记录。</li>\n<li>如果要删除所有记录\n<ol>\n<li>delete from 表名；– 不推荐使用。有多少条记录就会执行多少次删除操作</li>\n<li>TRUNCATE TABLE 表名；– 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>修改数据：\n<ul>\n<li>\n<p>语法：</p>\n<ul>\n<li>update 表名 set 列名 1 = 值 1, 列名 2 = 值 2,… [where 条件];</li>\n</ul>\n</li>\n<li>\n<p>注意：</p>\n<ol>\n<li>如果不加任何条件，则会将表中所有记录全部修改。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"dql查询表中的记录\"><a class=\"markdownIt-Anchor\" href=\"#dql查询表中的记录\">#</a> DQL：查询表中的记录</h2>\n<ul>\n<li>select * from 表名；</li>\n</ul>\n<ol>\n<li>\n<p>语法：<br>\nselect<br>\n 字段列表<br>\n from<br>\n 表名列表<br>\n where<br>\n 条件列表<br>\n group by<br>\n 分组字段<br>\n having<br>\n 分组之后的条件<br>\n order by<br>\n 排序<br>\n limit<br>\n 分页限定</p>\n</li>\n<li>\n<p>基础查询</p>\n<ol>\n<li>多个字段的查询<br>\n select 字段名 1，字段名 2… from 表名；\n<ul>\n<li>注意：\n<ul>\n<li>如果查询所有字段，则可以使用 * 来替代字段列表。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>去除重复：\n<ul>\n<li>distinct</li>\n</ul>\n</li>\n<li>计算列\n<ul>\n<li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li>\n<li>ifnull (表达式 1, 表达式 2)：null 参与的运算，计算结果都为 null\n<ul>\n<li>表达式 1：哪个字段需要判断是否为 null</li>\n<li>如果该字段为 null 后的替换值。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>起别名：\n<ul>\n<li>as：as 也可以省略</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>条件查询</p>\n<ol>\n<li>where 子句后跟条件</li>\n<li>运算符\n<ul>\n<li>\n<blockquote>\n<p>、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p>\n</blockquote>\n</li>\n<li>\n<p>BETWEEN…AND</p>\n</li>\n<li>\n<p>IN (集合)</p>\n</li>\n<li>\n<p>LIKE：模糊查询</p>\n<ul>\n<li>占位符：\n<ul>\n<li>_: 单个任意字符</li>\n<li>%：多个任意字符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>IS NULL</p>\n</li>\n<li>\n<p>and  或 &amp;&amp;</p>\n</li>\n<li>\n<p>or  或 ||</p>\n</li>\n<li>\n<p>not  或！</p>\n<p>– 查询年龄大于 20 岁</p>\n<p>SELECT * FROM student WHERE age &gt; 20;</p>\n<p>SELECT * FROM student WHERE age &gt;= 20;</p>\n<p>– 查询年龄等于 20 岁<br>\n SELECT * FROM student WHERE age = 20;</p>\n<p>– 查询年龄不等于 20 岁<br>\n SELECT * FROM student WHERE age != 20;<br>\nSELECT * FROM student WHERE age &lt;&gt; 20;</p>\n<p>– 查询年龄大于等于 20 小于等于 30</p>\n<p>SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;<br>\nSELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;<br>\nSELECT * FROM student WHERE age BETWEEN 20 AND 30;</p>\n<p>– 查询年龄 22 岁，18 岁，25 岁的信息<br>\n SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25<br>\nSELECT * FROM student WHERE age IN (22,18,25);</p>\n<p>– 查询英语成绩为 null<br>\nSELECT * FROM student WHERE english = NULL; – 不对的。null 值不能使用 = （!=） 判断</p>\n<p>SELECT * FROM student WHERE english IS NULL;</p>\n<p>– 查询英语成绩不为 null<br>\nSELECT * FROM student WHERE english  IS NOT NULL;</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>​\t\t\t– 查询姓马的有哪些？ like<br>\n​\t\t\tSELECT * FROM student WHERE NAME LIKE ‘马 %’;<br>\n​\t\t\t– 查询姓名第二个字是化的人<br>\n​\t\t\t<br>\n​\t\t\tSELECT * FROM student WHERE NAME LIKE \"<em>化 %\";<br>\n​\t\t\t<br>\n​\t\t\t– 查询姓名是 3 个字的人<br>\n​\t\t\tSELECT * FROM student WHERE NAME LIKE '</em>__’;</p>\n<p>​</p>\n<p>​\t\t\t– 查询姓名中包含德的人<br>\n​\t\t\tSELECT * FROM student WHERE NAME LIKE ‘% 德 %’;</p>\n<p>​</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://www.baocai-blog.cn/2020/09/30/MySQL%E7%BA%A6%E6%9D%9F/",
            "url": "https://www.baocai-blog.cn/2020/09/30/MySQL%E7%BA%A6%E6%9D%9F/",
            "title": "MySQL约束",
            "date_published": "2020-09-29T16:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h1>\n<ol>\n<li>\n<p>DQL: 查询语句</p>\n<ol>\n<li>排序查询</li>\n<li>聚合函数</li>\n<li>分组查询</li>\n<li>分页查询</li>\n</ol>\n</li>\n<li>\n<p>约束</p>\n</li>\n<li>\n<p>多表之间的关系</p>\n</li>\n<li>\n<p>范式</p>\n</li>\n<li>\n<p>数据库的备份和还原</p>\n</li>\n</ol>\n<h2 id=\"dql查询语句\"><a class=\"markdownIt-Anchor\" href=\"#dql查询语句\">#</a> DQL: 查询语句</h2>\n<ol>\n<li>\n<p>排序查询</p>\n<ul>\n<li>\n<p>语法：order by 子句</p>\n<ul>\n<li>order by 排序字段 1 排序方式 1 ，  排序字段 2 排序方式 2…</li>\n</ul>\n</li>\n<li>\n<p>排序方式：</p>\n<ul>\n<li>ASC：升序，默认的。</li>\n<li>DESC：降序。</li>\n</ul>\n</li>\n<li>\n<p>注意：</p>\n<ul>\n<li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>聚合函数：将一列数据作为一个整体，进行纵向的计算。</p>\n<ol>\n<li>count：计算个数\n<ol>\n<li>一般选择非空的列：主键</li>\n<li>count(*)</li>\n</ol>\n</li>\n<li>max：计算最大值</li>\n<li>min：计算最小值</li>\n<li>sum：计算和</li>\n<li>avg：计算平均值</li>\n</ol>\n<ul>\n<li>注意：聚合函数的计算，排除 null 值。<br>\n解决方案：<br>\n1. 选择不包含非空的列进行计算<br>\n 2. IFNULL 函数</li>\n</ul>\n</li>\n<li>\n<p>分组查询:</p>\n<ol>\n<li>\n<p>语法：group by 分组字段；</p>\n</li>\n<li>\n<p>注意：</p>\n<ol>\n<li>分组之后查询的字段：分组字段、聚合函数</li>\n<li>where 和 having 的区别？\n<ol>\n<li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having 在分组之后进行限定，如果不满足结果，则不会被查询出来</li>\n<li>where 后不可以跟聚合函数，having 可以进行聚合函数的判断。</li>\n</ol>\n</li>\n</ol>\n<p>– 按照性别分组。分别查询男、女同学的平均分</p>\n<p>SELECT sex , AVG(math) FROM student GROUP BY sex;</p>\n<p>– 按照性别分组。分别查询男、女同学的平均分，人数</p>\n<p>SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;</p>\n<p>–  按照性别分组。分别查询男、女同学的平均分，人数 要求：分数低于 70 分的人，不参与分组<br>\n SELECT sex , AVG (math),COUNT (id) FROM student WHERE math &gt; 70 GROUP BY sex;</p>\n<p>–  按照性别分组。分别查询男、女同学的平均分，人数 要求：分数低于 70 分的人，不参与分组，分组之后。人数要大于 2 个人<br>\n SELECT sex , AVG (math),COUNT (id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT (id) &gt; 2;</p>\n<p>SELECT sex , AVG (math),COUNT (id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>​\t\t\t<br>\n4. 分页查询<br>\n 1. 语法：limit 开始的索引，每页查询的条数；<br>\n2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数<br>\n– 每页显示 3 条记录</p>\n<pre><code>\tSELECT * FROM student LIMIT 0,3; -- 第1页\n\t\n\tSELECT * FROM student LIMIT 3,3; -- 第2页\n\t\n\tSELECT * FROM student LIMIT 6,3; -- 第3页\n\n3. limit 是一个MySQL\"方言\"\n</code></pre>\n<h2 id=\"约束\"><a class=\"markdownIt-Anchor\" href=\"#约束\">#</a> 约束</h2>\n<ul>\n<li>\n<p>概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p>\n</li>\n<li>\n<p>分类：</p>\n<ol>\n<li>主键约束：primary key</li>\n<li>非空约束：not null</li>\n<li>唯一约束：unique</li>\n<li>外键约束：foreign key</li>\n</ol>\n</li>\n<li>\n<p>非空约束：not null，某一列的值不能为 null</p>\n<ol>\n<li>\n<p>创建表时添加约束<br>\n CREATE TABLE stu (<br>\nid INT,<br>\nNAME VARCHAR (20) NOT NULL – name 为非空<br>\n);</p>\n</li>\n<li>\n<p>创建表完后，添加非空约束<br>\n ALTER TABLE stu MODIFY NAME VARCHAR (20) NOT NULL;</p>\n</li>\n<li>\n<p>删除 name 的非空约束<br>\n ALTER TABLE stu MODIFY NAME VARCHAR (20);</p>\n</li>\n</ol>\n</li>\n<li>\n<p>唯一约束：unique，某一列的值不能重复</p>\n<ol>\n<li>注意：\n<ul>\n<li>唯一约束可以有 NULL 值，但是只能有一条记录为 null</li>\n</ul>\n</li>\n<li>在创建表时，添加唯一约束<br>\n CREATE TABLE stu (<br>\nid INT,<br>\nphone_number VARCHAR (20) UNIQUE – 手机号<br>\n);</li>\n<li>删除唯一约束<br>\n ALTER TABLE stu DROP INDEX phone_number;</li>\n<li>在表创建完后，添加唯一约束<br>\n ALTER TABLE stu MODIFY phone_number VARCHAR (20) UNIQUE;</li>\n</ol>\n</li>\n<li>\n<p>主键约束：primary key。</p>\n<ol>\n<li>\n<p>注意：</p>\n<ol>\n<li>含义：非空且唯一</li>\n<li>一张表只能有一个字段为主键</li>\n<li>主键就是表中记录的唯一标识</li>\n</ol>\n</li>\n<li>\n<p>在创建表时，添加主键约束<br>\n create table stu (<br>\nid int primary key,-- 给 id 添加主键约束<br>\n name varchar (20)<br>\n);</p>\n</li>\n<li>\n<p>删除主键<br>\n– 错误 alter table stu modify id int ;<br>\nALTER TABLE stu DROP PRIMARY KEY;</p>\n</li>\n<li>\n<p>创建完表后，添加主键<br>\n ALTER TABLE stu MODIFY id INT PRIMARY KEY;</p>\n</li>\n<li>\n<p>自动增长：</p>\n<ol>\n<li>\n<p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p>\n</li>\n<li>\n<p>在创建表时，添加主键约束，并且完成主键自增长<br>\n create table stu (<br>\nid int primary key auto_increment,-- 给 id 添加主键约束<br>\n name varchar (20)<br>\n);</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p>​\t\t\t<br>\n​\t\t3. 删除自动增长<br>\n​\t\tALTER TABLE stu MODIFY id INT;<br>\n​\t\t4. 添加自动增长<br>\n​\t\tALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</p>\n<ul>\n<li>外键约束：foreign key, 让表于表产生关系，从而保证数据的正确性。\n<ol>\n<li>\n<p>在创建表时，可以添加外键</p>\n<ul>\n<li>语法：<br>\ncreate table 表名 (<br>\n…<br>\n 外键列<br>\n constraint 外键名称 foreign key (外键列名称) references 主表名称 (主表列名称)<br>\n);</li>\n</ul>\n</li>\n<li>\n<p>删除外键<br>\n ALTER TABLE 表名 DROP FOREIGN KEY 外键名称；</p>\n</li>\n<li>\n<p>创建表之后，添加外键<br>\n ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称 (主表列名称);</p>\n</li>\n</ol>\n</li>\n</ul>\n<p>​\t\t<br>\n​\t4. 级联操作<br>\n​\t\t1. 添加级联操作<br>\n​\t\t\t语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称<br>\n​\t\t\t\t\tFOREIGN KEY (外键字段名称) REFERENCES 主表名称 (主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;<br>\n​\t\t2. 分类：<br>\n​\t\t\t1. 级联更新：ON UPDATE CASCADE<br>\n​\t\t\t2. 级联删除：ON DELETE CASCADE</p>\n<h2 id=\"数据库的设计\"><a class=\"markdownIt-Anchor\" href=\"#数据库的设计\">#</a> 数据库的设计</h2>\n<ol>\n<li>多表之间的关系\n<ol>\n<li>\n<p>分类：</p>\n<ol>\n<li>一对一 (了解)：\n<ul>\n<li>如：人和身份证</li>\n<li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li>\n</ul>\n</li>\n<li>一对多 (多对一)：\n<ul>\n<li>如：部门和员工</li>\n<li>分析：一个部门有多个员工，一个员工只能对应一个部门</li>\n</ul>\n</li>\n<li>多对多：\n<ul>\n<li>如：学生和课程</li>\n<li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>实现关系：</p>\n<ol>\n<li>一对多 (多对一)：\n<ul>\n<li>如：部门和员工</li>\n<li>实现方式：在多的一方建立外键，指向一的一方的主键。</li>\n</ul>\n</li>\n<li>多对多：\n<ul>\n<li>如：学生和课程</li>\n<li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li>\n</ul>\n</li>\n<li>一对一 (了解)：\n<ul>\n<li>如：人和身份证</li>\n<li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>案例<br>\n– 创建旅游线路分类表 tab_category<br>\n– cid 旅游线路分类主键，自动增长<br>\n– cname 旅游线路分类名称非空，唯一，字符串 100<br>\nCREATE TABLE tab_category (<br>\ncid INT PRIMARY KEY AUTO_INCREMENT,<br>\ncname VARCHAR(100) NOT NULL UNIQUE<br>\n);</p>\n<p>– 创建旅游线路表 tab_route<br>\n/*<br>\nrid 旅游线路主键，自动增长<br>\n rname 旅游线路名称非空，唯一，字符串 100<br>\nprice 价格<br>\n rdate 上架时间，日期类型<br>\n cid 外键，所属分类<br>\n */<br>\nCREATE TABLE tab_route(<br>\nrid INT PRIMARY KEY AUTO_INCREMENT,<br>\nrname VARCHAR(100) NOT NULL UNIQUE,<br>\nprice DOUBLE,<br>\nrdate DATE,<br>\ncid INT,<br>\nFOREIGN KEY (cid) REFERENCES tab_category(cid)<br>\n);</p>\n<p>/* 创建用户表 tab_user<br>\nuid 用户主键，自增长<br>\n username 用户名长度 100，唯一，非空<br>\n password 密码长度 30，非空<br>\n name 真实姓名长度 100<br>\nbirthday 生日<br>\n sex 性别，定长字符串 1<br>\ntelephone 手机号，字符串 11<br>\nemail 邮箱，字符串长度 100<br>\n*/<br>\nCREATE TABLE tab_user (<br>\nuid INT PRIMARY KEY AUTO_INCREMENT,<br>\nusername VARCHAR(100) UNIQUE NOT NULL,<br>\nPASSWORD VARCHAR(30) NOT NULL,<br>\nNAME VARCHAR(100),<br>\nbirthday DATE,<br>\nsex CHAR (1) DEFAULT ‘男’,<br>\ntelephone VARCHAR(11),<br>\nemail VARCHAR(100)<br>\n);</p>\n<p>/*<br>\n 创建收藏表 tab_favorite<br>\nrid 旅游线路 id，外键<br>\n date 收藏时间<br>\n uid 用户 id，外键<br>\n rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次<br>\n */<br>\nCREATE TABLE tab_favorite (<br>\nrid INT, – 线路 id<br>\nDATE DATETIME,<br>\nuid INT, – 用户 id<br>\n– 创建复合主键<br>\n PRIMARY KEY (rid,uid), – 联合主键<br>\n FOREIGN KEY (rid) REFERENCES tab_route (rid),<br>\nFOREIGN KEY(uid) REFERENCES tab_user(uid)<br>\n);</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>​</p>\n<h2 id=\"数据库设计的范式\"><a class=\"markdownIt-Anchor\" href=\"#数据库设计的范式\">#</a> 数据库设计的范式</h2>\n<ul>\n<li>\n<p>概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p>\n<p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。<br>\n目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯 - 科德范式（BCNF）、第四范式 (4NF）和第五范式（5NF，又称完美范式）。</p>\n</li>\n<li>\n<p>分类：</p>\n<ol>\n<li>\n<p>第一范式（1NF）：每一列都是不可分割的原子数据项</p>\n</li>\n<li>\n<p>第二范式（2NF）：在 1NF 的基础上，非码属性必须完全依赖于码（在 1NF 基础上消除非主属性对主码的部分函数依赖）</p>\n<ul>\n<li>几个概念：\n<ol>\n<li>函数依赖：A–&gt;B, 如果通过 A 属性 (属性组) 的值，可以确定唯一 B 属性的值。则称 B 依赖于 A<br>\n 例如：学号–&gt; 姓名。  （学号，课程名称） --&gt; 分数</li>\n<li>完全函数依赖：A–&gt;B， 如果 A 是一个属性组，则 B 属性值得确定需要依赖于 A 属性组中所有的属性值。<br>\n例如：（学号，课程名称） --&gt; 分数</li>\n<li>部分函数依赖：A–&gt;B， 如果 A 是一个属性组，则 B 属性值得确定只需要依赖于 A 属性组中某一些值即可。<br>\n例如：（学号，课程名称） – &gt; 姓名</li>\n<li>传递函数依赖：A–&gt;B, B – &gt;C . 如果通过 A 属性 (属性组) 的值，可以确定唯一 B 属性的值，在通过 B 属性（属性组）的值可以确定唯一 C 属性的值，则称 C 传递函数依赖于 A<br>\n 例如：学号–&gt; 系名，系名–&gt; 系主任</li>\n<li>码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性 (属性组) 为该表的码<br>\n例如：该表中码为：（学号，课程名称）\n<ul>\n<li>主属性：码属性组中的所有属性</li>\n<li>非主属性：除过码属性组的属性</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>第三范式（3NF）：在 2NF 基础上，任何非主属性不依赖于其它非主属性（在 2NF 基础上消除传递依赖）</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"数据库的备份和还原\"><a class=\"markdownIt-Anchor\" href=\"#数据库的备份和还原\">#</a> 数据库的备份和还原</h2>\n<ol>\n<li>命令行：\n<ul>\n<li>语法：\n<ul>\n<li>备份： mysqldump -u 用户名 -p 密码 数据库名称 &gt; 保存的路径</li>\n<li>还原：\n<ol>\n<li>登录数据库</li>\n<li>创建数据库</li>\n<li>使用数据库</li>\n<li>执行文件。source 文件路径</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>图形化工具：</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://www.baocai-blog.cn/2020/09/30/MySQL%E5%A4%9A%E8%A1%A8-%E4%BA%8B%E5%8A%A1/",
            "url": "https://www.baocai-blog.cn/2020/09/30/MySQL%E5%A4%9A%E8%A1%A8-%E4%BA%8B%E5%8A%A1/",
            "title": "MySQL多表和事务",
            "date_published": "2020-09-29T16:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><hr>\n<h1 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h1>\n<ol>\n<li>\n<p>多表查询</p>\n</li>\n<li>\n<p>事务</p>\n</li>\n<li>\n<p>DCL</p>\n</li>\n</ol>\n<h2 id=\"多表查询\"><a class=\"markdownIt-Anchor\" href=\"#多表查询\">#</a> 多表查询：</h2>\n<ul>\n<li>\n<p>查询语法：<br>\nselect<br>\n 列名列表<br>\n from<br>\n 表名列表<br>\n where…</p>\n</li>\n<li>\n<p>准备 sql</p>\n<h3 id=\"创建部门表\"><a class=\"markdownIt-Anchor\" href=\"#创建部门表\">#</a> 创建部门表</h3>\n<p>CREATE TABLE dept(<br>\nid INT PRIMARY KEY AUTO_INCREMENT,<br>\nNAME VARCHAR(20)<br>\n);<br>\nINSERT INTO dept (NAME) VALUES (‘开发部’),(‘市场部’),(‘财务部’);</p>\n<h3 id=\"创建员工表\"><a class=\"markdownIt-Anchor\" href=\"#创建员工表\">#</a> 创建员工表</h3>\n<p>CREATE TABLE emp (<br>\nid INT PRIMARY KEY AUTO_INCREMENT,<br>\nNAME VARCHAR(10),<br>\ngender CHAR (1), – 性别<br>\n salary DOUBLE, – 工资<br>\n join_date DATE, – 入职日期<br>\n dept_id INT,<br>\nFOREIGN KEY (dept_id) REFERENCES dept (id) – 外键，关联部门表 (部门表的主键)<br>\n);<br>\nINSERT INTO emp (NAME,gender,salary,join_date,dept_id) VALUES (‘孙悟空’,‘男’,7200,‘2013-02-24’,1);<br>\nINSERT INTO emp (NAME,gender,salary,join_date,dept_id) VALUES (‘猪八戒’,‘男’,3600,‘2010-12-02’,2);<br>\nINSERT INTO emp (NAME,gender,salary,join_date,dept_id) VALUES (‘唐僧’,‘男’,9000,‘2008-08-08’,2);<br>\nINSERT INTO emp (NAME,gender,salary,join_date,dept_id) VALUES (‘白骨精’,‘女’,5000,‘2015-10-07’,3);<br>\nINSERT INTO emp (NAME,gender,salary,join_date,dept_id) VALUES (‘蜘蛛精’,‘女’,4500,‘2011-03-14’,1);</p>\n</li>\n<li>\n<p>笛卡尔积：</p>\n<ul>\n<li>有两个集合 A,B . 取这两个集合的所有组成情况。</li>\n<li>要完成多表查询，需要消除无用的数据</li>\n</ul>\n</li>\n<li>\n<p>多表查询的分类：</p>\n<ol>\n<li>内连接查询：\n<ol>\n<li>\n<p>隐式内连接：使用 where 条件消除无用数据</p>\n<ul>\n<li>例子：<br>\n– 查询所有员工信息和对应的部门信息</li>\n</ul>\n<p>SELECT * FROM emp,dept WHERE emp. <code>dept_id</code>  = dept. <code>id</code> ;</p>\n<p>– 查询员工表的名称，性别。部门表的名称<br>\n SELECT <a href=\"http://emp.name\">emp.name</a>,emp.gender,<a href=\"http://dept.name\">dept.name</a> FROM emp,dept WHERE emp. <code>dept_id</code>  = dept. <code>id</code> ;</p>\n<p>SELECT<br>\n<a href=\"http://t1.name\">t1.name</a>, – 员工表的姓名<br>\n t1.gender,-- 员工表的性别<br>\n<a href=\"http://t2.name\"> t2.name</a> – 部门表的名称<br>\n FROM<br>\nemp t1,<br>\ndept t2<br>\nWHERE<br>\nt1. <code>dept_id</code>  = t2. <code>id</code> ;</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p>​\t<br>\n​\t\t2. 显式内连接：<br>\n​\t\t\t* 语法： select 字段列表 from 表名 1 [inner] join 表名 2 on 条件<br>\n​\t\t\t* 例如：<br>\n​\t\t\t\t* SELECT * FROM emp INNER JOIN dept ON emp. <code>dept_id</code>  = dept. <code>id</code> ;\t<br>\n​\t\t\t\t* SELECT * FROM emp JOIN dept ON emp. <code>dept_id</code>  = dept. <code>id</code> ;</p>\n<pre><code>3. 内连接查询：\n\t1. 从哪些表中查询数据\n\t2. 条件是什么\n\t3. 查询哪些字段\n</code></pre>\n<ol start=\"2\">\n<li>外链接查询：\n<ol>\n<li>左外连接：\n<ul>\n<li>语法：select 字段列表 from 表 1 left [outer] join 表 2 on 条件；</li>\n<li>查询的是左表所有数据以及其交集部分。</li>\n<li>例子：<br>\n– 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称<br>\n SELECT \tt1.*,t2. <code>name</code>  FROM emp t1 LEFT JOIN dept t2 ON t1. <code>dept_id</code>  = t2. <code>id</code> ;</li>\n</ul>\n</li>\n<li>右外连接：\n<ul>\n<li>语法：select 字段列表 from 表 1 right [outer] join 表 2 on 条件；</li>\n<li>查询的是右表所有数据以及其交集部分。</li>\n<li>例子：<br>\nSELECT \t* FROM dept t2 RIGHT JOIN emp t1 ON t1. <code>dept_id</code>  = t2. <code>id</code> ;</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>子查询：\n<ul>\n<li>\n<p>概念：查询中嵌套查询，称嵌套查询为子查询。<br>\n– 查询工资最高的员工信息<br>\n– 1 查询最高的工资是多少 9000<br>\nSELECT MAX(salary) FROM emp;</p>\n<p>– 2 查询员工信息，并且工资等于 9000 的<br>\n SELECT * FROM emp WHERE emp. <code>salary</code>  = 9000;</p>\n<p>– 一条 sql 就完成这个操作。子查询<br>\n SELECT * FROM emp WHERE emp. <code>salary</code>  = (SELECT MAX(salary) FROM emp);</p>\n</li>\n<li>\n<p>子查询不同情况</p>\n<ol>\n<li>\n<p>子查询的结果是单行单列的：</p>\n<ul>\n<li>子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</li>\n<li></li>\n</ul>\n<p>– 查询员工工资小于平均工资的人<br>\n SELECT * FROM emp WHERE emp.salary &lt;(SELECT AVG (salary) FROM emp);</p>\n</li>\n<li>\n<p>子查询的结果是多行单列的：</p>\n<ul>\n<li>子查询可以作为条件，使用运算符 in 来判断<br>\n– 查询’财务部’和’市场部’所有的员工信息<br>\n SELECT id FROM dept WHERE NAME = ‘财务部’ OR NAME = ‘市场部’;<br>\nSELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;<br>\n– 子查询<br>\n SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = ‘财务部’ OR NAME = ‘市场部’);</li>\n</ul>\n</li>\n<li>\n<p>子查询的结果是多行多列的：</p>\n<ul>\n<li>子查询可以作为一张虚拟表参与查询<br>\n– 查询员工入职日期是 2011-11-11 日之后的员工信息和部门信息<br>\n– 子查询<br>\n SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp. <code>join_date</code>  &gt; ‘2011-11-11’) t2<br>\nWHERE <a href=\"http://t1.id\">t1.id</a> = t2.dept_id;</li>\n</ul>\n<p>– 普通内连接<br>\n SELECT * FROM emp t1,dept t2 WHERE t1. <code>dept_id</code>  = t2. <code>id</code>  AND t1. <code>join_date</code>  &gt;  ‘2011-11-11’</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>多表查询练习</p>\n<pre><code>  -- 部门表\n  CREATE TABLE dept (\n    id INT PRIMARY KEY PRIMARY KEY, -- 部门id\n    dname VARCHAR(50), -- 部门名称\n    loc VARCHAR(50) -- 部门所在地\n  );\n  \n  -- 添加4个部门\n  INSERT INTO dept(id,dname,loc) VALUES \n  (10,'教研部','北京'),\n  (20,'学工部','上海'),\n  (30,'销售部','广州'),\n  (40,'财务部','深圳');\n</code></pre>\n</li>\n</ul>\n<p>​\t\t\t\t<br>\n​</p>\n<p>​\t\t\t– 职务表，职务名称，职务描述<br>\n​\t\t\tCREATE TABLE job (<br>\n​\t\t\t  id INT PRIMARY KEY,<br>\n​\t\t\t  jname VARCHAR(20),<br>\n​\t\t\t  description VARCHAR(50)<br>\n​\t\t\t);<br>\n​\t\t\t<br>\n​\t\t\t– 添加 4 个职务<br>\n​\t\t\tINSERT INTO job (id, jname, description) VALUES<br>\n​\t\t\t(1, ‘董事长’, ‘管理整个公司，接单’),<br>\n​\t\t\t(2, ‘经理’, ‘管理部门员工’),<br>\n​\t\t\t(3, ‘销售员’, ‘向客人推销产品’),<br>\n​\t\t\t(4, ‘文员’, ‘使用办公软件’);</p>\n<p>​\t\t\t\t<br>\n​</p>\n<p>​\t\t\t– 员工表<br>\n​\t\t\tCREATE TABLE emp (<br>\n​\t\t\t  id INT PRIMARY KEY, – 员工 id<br>\n​\t\t\t  ename VARCHAR (50), – 员工姓名<br>\n​\t\t\t  job_id INT, – 职务 id<br>\n​\t\t\t  mgr INT , – 上级领导<br>\n​\t\t\t  joindate DATE, – 入职日期<br>\n​\t\t\t  salary DECIMAL (7,2), – 工资<br>\n​\t\t\t  bonus DECIMAL (7,2), – 奖金<br>\n​\t\t\t  dept_id INT, – 所在部门编号<br>\n​\t\t\t  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),<br>\n​\t\t\t  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)<br>\n​\t\t\t);<br>\n​\t\t\t<br>\n​\t\t\t– 添加员工<br>\n​\t\t\tINSERT INTO emp (id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES<br>\n​\t\t\t(1001,‘孙悟空’,4,1004,‘2000-12-17’,‘8000.00’,NULL,20),<br>\n​\t\t\t(1002,‘卢俊义’,3,1006,‘2001-02-20’,‘16000.00’,‘3000.00’,30),<br>\n​\t\t\t(1003,‘林冲’,3,1006,‘2001-02-22’,‘12500.00’,‘5000.00’,30),<br>\n​\t\t\t(1004,‘唐僧’,2,1009,‘2001-04-02’,‘29750.00’,NULL,20),<br>\n​\t\t\t(1005,‘李逵’,4,1006,‘2001-09-28’,‘12500.00’,‘14000.00’,30),<br>\n​\t\t\t(1006,‘宋江’,2,1009,‘2001-05-01’,‘28500.00’,NULL,30),<br>\n​\t\t\t(1007,‘刘备’,2,1009,‘2001-09-01’,‘24500.00’,NULL,10),<br>\n​\t\t\t(1008,‘猪八戒’,4,1004,‘2007-04-19’,‘30000.00’,NULL,20),<br>\n​\t\t\t(1009,‘罗贯中’,1,NULL,‘2001-11-17’,‘50000.00’,NULL,10),<br>\n​\t\t\t(1010,‘吴用’,3,1006,‘2001-09-08’,‘15000.00’,‘0.00’,30),<br>\n​\t\t\t(1011,‘沙僧’,4,1004,‘2007-05-23’,‘11000.00’,NULL,20),<br>\n​\t\t\t(1012,‘李逵’,4,1006,‘2001-12-03’,‘9500.00’,NULL,30),<br>\n​\t\t\t(1013,‘小白龙’,4,1004,‘2001-12-03’,‘30000.00’,NULL,20),<br>\n​\t\t\t(1014,‘关羽’,4,1007,‘2002-01-23’,‘13000.00’,NULL,10);</p>\n<p>​\t\t\t\t<br>\n​</p>\n<p>​\t\t\t– 工资等级表<br>\n​\t\t\tCREATE TABLE salarygrade (<br>\n​\t\t\t  grade INT PRIMARY KEY,   – 级别<br>\n​\t\t\t  losalary INT,  – 最低工资<br>\n​\t\t\t  hisalary INT – 最高工资<br>\n​\t\t\t);<br>\n​\t\t\t<br>\n​\t\t\t– 添加 5 个工资等级<br>\n​\t\t\tINSERT INTO salarygrade (grade,losalary,hisalary) VALUES<br>\n​\t\t\t(1,7000,12000),<br>\n​\t\t\t(2,12010,14000),<br>\n​\t\t\t(3,14010,20000),<br>\n​\t\t\t(4,20010,30000),<br>\n​\t\t\t(5,30010,99990);<br>\n​\t\t\t<br>\n​\t\t\t– 需求：<br>\n​\t\t\t<br>\n​\t\t\t– 1. 查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述<br>\n​\t\t\t/*<br>\n​\t\t\t\t分析：<br>\n​\t\t\t\t\t1. 员工编号，员工姓名，工资，需要查询 emp 表  职务名称，职务描述 需要查询 job 表<br>\n​\t\t\t\t\t2. 查询条件 emp.job_id = <a href=\"http://job.id\">job.id</a><br>\n​\t\t\t<br>\n​\t\t\t*/<br>\n​\t\t\tSELECT<br>\n​\t\t\t\tt1. <code>id</code> , – 员工编号<br>\n​\t\t\t\tt1. <code>ename</code> , – 员工姓名<br>\n​\t\t\t\tt1. <code>salary</code> ,-- 工资<br>\n​\t\t\t\tt2. <code>jname</code> , – 职务名称<br>\n​\t\t\t\tt2. <code>description</code>  – 职务描述<br>\n​\t\t\tFROM<br>\n​\t\t\t\temp t1, job t2<br>\n​\t\t\tWHERE<br>\n​\t\t\t\tt1. <code>job_id</code>  = t2. <code>id</code> ;</p>\n<p>​\t\t\t\t<br>\n​</p>\n<p>​\t\t\t– 2. 查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置<br>\n​\t\t\t/*<br>\n​\t\t\t\t分析：</p>\n<pre><code>\t\t\t1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept\n\t\t\t2. 条件： emp.job_id = job.id and emp.dept_id = dept.id\n\t*/\n\t\n\tSELECT \n\t\tt1.`id`, -- 员工编号\n\t\tt1.`ename`, -- 员工姓名\n\t\tt1.`salary`,-- 工资\n\t\tt2.`jname`, -- 职务名称\n\t\tt2.`description`, -- 职务描述\n\t\tt3.`dname`, -- 部门名称\n\t\tt3.`loc` -- 部门位置\n\tFROM \n\t\temp t1, job t2,dept t3\n\tWHERE \n\t\tt1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;\n\t\n\t-- 3.查询员工姓名，工资，工资等级\n\t/*\n\t\t分析：\n\t\t\t1.员工姓名，工资 emp  工资等级 salarygrade\n\t\t\t2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary\n\t\t\t\temp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary\n\t*/\n\tSELECT \n\t\tt1.ename ,\n\t\tt1.`salary`,\n\t\tt2.*\n\tFROM emp t1, salarygrade t2\n\tWHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;\n</code></pre>\n<p>​\t\t\t\t<br>\n​</p>\n<p>​\t\t\t– 4. 查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级<br>\n​\t\t\t/*<br>\n​\t\t\t\t分析：</p>\n<pre><code>\t\t\t1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade\n\t\t\t2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary\n\t\t\t\t\n\t*/\n\tSELECT \n\t\tt1.`ename`,\n\t\tt1.`salary`,\n\t\tt2.`jname`,\n\t\tt2.`description`,\n\t\tt3.`dname`,\n\t\tt3.`loc`,\n\t\tt4.`grade`\n\tFROM \n\t\temp t1,job t2,dept t3,salarygrade t4\n\tWHERE \n\t\tt1.`job_id` = t2.`id` \n\t\tAND t1.`dept_id` = t3.`id`\n\t\tAND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;\n</code></pre>\n<p>​\t\t\t\t<br>\n​</p>\n<p>​\t\t\t– 5. 查询出部门编号、部门名称、部门位置、部门人数<br>\n​\t\t\t<br>\n​\t\t\t/*<br>\n​\t\t\t\t分析：<br>\n​\t\t\t\t\t1. 部门编号、部门名称、部门位置 dept 表。 部门人数 emp 表<br>\n​\t\t\t\t\t2. 使用分组查询。按照 emp.dept_id 完成分组，查询 count (id)<br>\n​\t\t\t\t\t3. 使用子查询将第 2 步的查询结果和 dept 表进行关联查询<br>\n​\t\t\t\t\t<br>\n​\t\t\t*/<br>\n​\t\t\tSELECT<br>\n​\t\t\t\tt1. <code>id</code> ,t1. <code>dname</code> ,t1. <code>loc</code>  , t2.total<br>\n​\t\t\tFROM<br>\n​\t\t\t\tdept t1,<br>\n​\t\t\t\t(SELECT<br>\n​\t\t\t\t\tdept_id,COUNT(id) total<br>\n​\t\t\t\tFROM<br>\n​\t\t\t\t\temp<br>\n​\t\t\t\tGROUP BY dept_id) t2<br>\n​\t\t\tWHERE t1. <code>id</code>  = t2.dept_id;</p>\n<p>​</p>\n<p>​\t\t\t– 6. 查询所有员工的姓名及其直接上级的姓名，没有领导的员工也需要查询<br>\n​\t\t\t<br>\n​\t\t\t/*<br>\n​\t\t\t\t分析：<br>\n​\t\t\t\t\t1. 姓名 emp， 直接上级的姓名 emp</p>\n<h2 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h2>\n<ol>\n<li>事务的基本介绍\n<ol>\n<li>\n<p>概念：</p>\n<ul>\n<li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li>\n</ul>\n</li>\n<li>\n<p>操作：</p>\n<ol>\n<li>开启事务： start transaction;</li>\n<li>回滚：rollback;</li>\n<li>提交：commit;</li>\n</ol>\n</li>\n<li>\n<p>例子：<br>\nCREATE TABLE account (<br>\nid INT PRIMARY KEY AUTO_INCREMENT,<br>\nNAME VARCHAR(10),<br>\nbalance DOUBLE<br>\n);<br>\n– 添加数据<br>\n INSERT INTO account (NAME, balance) VALUES (‘zhangsan’, 1000), (‘lisi’, 1000);</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>​</p>\n<p>​\t\tSELECT * FROM account;<br>\n​\t\tUPDATE account SET balance = 1000;<br>\n​\t\t– 张三给李四转账 500 元<br>\n​\t\t<br>\n​\t\t– 0. 开启事务<br>\n​\t\tSTART TRANSACTION;<br>\n​\t\t– 1. 张三账户 -500<br>\n​\t\t<br>\n​\t\tUPDATE account SET balance = balance - 500 WHERE NAME = ‘zhangsan’;<br>\n​\t\t– 2. 李四账户 +500<br>\n​\t\t– 出错了…<br>\n​\t\tUPDATE account SET balance = balance + 500 WHERE NAME = ‘lisi’;<br>\n​\t\t<br>\n​\t\t– 发现执行没有问题，提交事务<br>\n​\t\tCOMMIT;<br>\n​\t\t<br>\n​\t\t– 发现出问题了，回滚事务<br>\n​\t\tROLLBACK;</p>\n<ol start=\"4\">\n<li>\n<p>MySQL 数据库中事务默认自动提交</p>\n<ul>\n<li>事务提交的两种方式：\n<ul>\n<li>自动提交：\n<ul>\n<li>mysql 就是自动提交的</li>\n<li>一条 DML (增删改) 语句会自动提交一次事务。</li>\n</ul>\n</li>\n<li>手动提交：\n<ul>\n<li>Oracle 数据库默认是手动提交事务</li>\n<li>需要先开启事务，再提交</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改事务的默认提交方式：\n<ul>\n<li>查看事务的默认提交方式：SELECT @@autocommit; – 1 代表自动提交  0 代表手动提交</li>\n<li>修改默认提交方式： set @@autocommit = 0;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>事务的四大特征：</p>\n<ol>\n<li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li>\n<li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li>\n<li>隔离性：多个事务之间。相互独立。</li>\n<li>一致性：事务操作前后，数据总量不变</li>\n</ol>\n</li>\n<li>\n<p>事务的隔离级别（了解）</p>\n<ul>\n<li>\n<p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p>\n</li>\n<li>\n<p>存在问题：</p>\n<ol>\n<li>脏读：一个事务，读取到另一个事务中没有提交的数据</li>\n<li>不可重复读 (虚读)：在同一个事务中，两次读取到的数据不一样。</li>\n<li>幻读：一个事务操作 (DML) 数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li>\n</ol>\n</li>\n<li>\n<p>隔离级别：</p>\n<ol>\n<li>read uncommitted：读未提交\n<ul>\n<li>产生的问题：脏读、不可重复读、幻读</li>\n</ul>\n</li>\n<li>read committed：读已提交 （Oracle）\n<ul>\n<li>产生的问题：不可重复读、幻读</li>\n</ul>\n</li>\n<li>repeatable read：可重复读 （MySQL 默认）\n<ul>\n<li>产生的问题：幻读</li>\n</ul>\n</li>\n<li>serializable：串行化\n<ul>\n<li>可以解决所有的问题</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</li>\n<li>数据库查询隔离级别：\n<ul>\n<li>select @@tx_isolation;</li>\n</ul>\n</li>\n<li>数据库设置隔离级别：\n<ul>\n<li>set global transaction isolation level  级别字符串；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>演示：<br>\nset global transaction isolation level read uncommitted;<br>\nstart transaction;<br>\n– 转账操作<br>\n update account set balance = balance - 500 where id = 1;<br>\nupdate account set balance = balance + 500 where id = 2;</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"dcl\"><a class=\"markdownIt-Anchor\" href=\"#dcl\">#</a> DCL：</h2>\n<ul>\n<li>\n<p>SQL 分类：</p>\n<ol>\n<li>DDL：操作数据库和表</li>\n<li>DML：增删改表中数据</li>\n<li>DQL：查询表中数据</li>\n<li>DCL：管理用户，授权</li>\n</ol>\n</li>\n<li>\n<p>DBA：数据库管理员</p>\n</li>\n<li>\n<p>DCL：管理用户，授权</p>\n<ol>\n<li>管理用户\n<ol>\n<li>\n<p>添加用户：</p>\n<ul>\n<li>语法：CREATE USER ‘用户名’@‘主机名’ IDENTIFIED BY ‘密码’;</li>\n</ul>\n</li>\n<li>\n<p>删除用户：</p>\n<ul>\n<li>语法：DROP USER ‘用户名’@‘主机名’;</li>\n</ul>\n</li>\n<li>\n<p>修改用户密码：</p>\n<p>UPDATE USER SET PASSWORD = PASSWORD (‘新密码’) WHERE USER = ‘用户名’;<br>\nUPDATE USER SET PASSWORD = PASSWORD(‘abc’) WHERE USER = ‘lisi’;</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>SET PASSWORD FOR ‘用户名’@‘主机名’ = PASSWORD (‘新密码’);<br>\nSET PASSWORD FOR ‘root’@‘localhost’ = PASSWORD(‘123’);</p>\n<ul>\n<li>mysql 中忘记了 root 用户的密码？</li>\n</ul>\n<ol>\n<li>\n<p>cmd – &gt; net stop mysql 停止 mysql 服务<br>\n * 需要管理员运行该 cmd</p>\n<pre><code> 2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables\n 3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功\n 4. use mysql;\n 5. update user set password = password('你的新密码') where user = 'root';\n 6. 关闭两个窗口\n 7. 打开任务管理器，手动结束mysqld.exe 的进程\n 8. 启动mysql服务\n 9. 使用新密码登录。\n</code></pre>\n</li>\n<li>\n<p>查询用户：<br>\n– 1. 切换到 mysql 数据库<br>\n USE myql;<br>\n– 2. 查询 user 表<br>\n SELECT * FROM USER;</p>\n<ul>\n<li>通配符： % 表示可以在任意主机使用用户登录数据库</li>\n</ul>\n</li>\n<li>\n<p>权限管理：</p>\n<ol>\n<li>\n<p>查询权限：<br>\n– 查询权限<br>\n SHOW GRANTS FOR ‘用户名’@‘主机名’;<br>\nSHOW GRANTS FOR ‘lisi’@’%’;</p>\n</li>\n<li>\n<p>授予权限：<br>\n– 授予权限<br>\n grant 权限列表 on 数据库名。表名 to ‘用户名’@‘主机名’;<br>\n– 给张三用户授予所有权限，在任意数据库任意表上</p>\n<p>GRANT ALL ON <em>.</em> TO ‘zhangsan’@‘localhost’;</p>\n</li>\n<li>\n<p>撤销权限：<br>\n– 撤销权限：<br>\nrevoke 权限列表 on 数据库名。表名 from ‘用户名’@‘主机名’;<br>\nREVOKE UPDATE ON db3. <code>account</code>  FROM ‘lisi’@’%’;</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>",
            "tags": [
                "MySQL"
            ]
        }
    ]
}