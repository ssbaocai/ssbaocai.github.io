<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.baocai-blog.cn</id>
    <title>手撕包菜 • Posts by &#34;spring&#34; tag</title>
    <link href="https://www.baocai-blog.cn" />
    <updated>2020-10-04T06:58:46.815Z</updated>
    <category term="MyBatis" />
    <category term="MySQL" />
    <category term="Java" />
    <category term="Spring" />
    <category term="多线程" />
    <category term="容器" />
    <category term="设计模式" />
    <entry>
        <id>https://www.baocai-blog.cn/2020/10/04/Spring/</id>
        <title>Spring/SpringMVC</title>
        <link rel="alternate" href="https://www.baocai-blog.cn/2020/10/04/Spring/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;spring是一个ioc和aop容器框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring是一个ioc和aop容器框架&#34;&gt;#&lt;/a&gt; Spring 是一个 IOC 和 AOP 容器框架。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制反转（IOC&lt;/strong&gt;）在 spring 开发模式中，&lt;strong&gt;spring 容器&lt;/strong&gt;使用了工厂模式为我们&lt;strong&gt;创建&lt;/strong&gt;所需要的对象，我们自己直接调用 spring 提供的对象就可以了，这是控制反转的思想。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;（&lt;strong&gt;DI&lt;/strong&gt;），spring 使用 javaBean 对象的 &lt;strong&gt;set 方法&lt;/strong&gt;或者&lt;strong&gt;带参数的构造方法&lt;/strong&gt;为我们在创建所需对象时将其&lt;strong&gt;属性&lt;/strong&gt;自动设置所需要的值 ** 的过程，就是依赖注入的思想。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;面向切面编程&lt;/strong&gt;（&lt;strong&gt;AOP&lt;/strong&gt;），在面向对象编程（oop）思想中，我们将事物纵向抽成一个个的对象。而在面向切面编程中，我们将一个个的对象某些类似的方面横向抽成一个切面，对这个切面进行一些如权限控制、事物管理，记录日志等公用操作处理的过程就是面向切面编程的思想。AOP 底层是动态代理，如果是接口  采用 JDK 动态代理，如果是类  采用 CGLIB 方式实现动态代理。&lt;/p&gt;
&lt;p&gt;通过预编译方式和运行期动态代理&lt;strong&gt;实现程序功能的统一维护&lt;/strong&gt;的一种技术。就是统一处理某一 “切面”（类）的问题，比如统一处理日志、异常等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-常用的注入方式有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-常用的注入方式有哪些&#34;&gt;#&lt;/a&gt; spring 常用的注入方式有哪些？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;setter 属性注入&lt;/li&gt;
&lt;li&gt;构造方法注入&lt;/li&gt;
&lt;li&gt;注解方式注入&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;说一下-spring-mvc-运行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说一下-spring-mvc-运行流程&#34;&gt;#&lt;/a&gt; 说一下 spring mvc 运行流程？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;spring     mvc 先将&lt;strong&gt;请求发送&lt;/strong&gt;给 DispatcherServlet（前置控制器）。&lt;/li&gt;
&lt;li&gt;DispatcherServlet     查询一个或多个 HandlerMapping（映射控制器），&lt;strong&gt;找到&lt;/strong&gt;处理请求的 Controller（处理器）。&lt;/li&gt;
&lt;li&gt;DispatcherServlet     再把请求&lt;strong&gt;提交到&lt;/strong&gt;对应的 Controller。&lt;/li&gt;
&lt;li&gt;Controller     进行业务逻辑&lt;strong&gt;处理后，会返回&lt;/strong&gt;一个 ModelAndView。&lt;/li&gt;
&lt;li&gt;Dispathcher     查询一个或多个 ViewResolver 视图解析器，找到 ModelAndView 对象指定的视图对象。&lt;/li&gt;
&lt;li&gt;视图对象负责渲染返回给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;springbootspringmvc区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springbootspringmvc区别&#34;&gt;#&lt;/a&gt; SpringBoot/SpringMVC 区别&lt;/h4&gt;
&lt;p&gt;Spring MVC 基于 Spring 的 web 框架，主要解决 WEB 开发的问题&lt;/p&gt;
&lt;p&gt;SpringBoot 实现自动配置，降低项目搭建的复杂度&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
            const img = document.createElement(&#39;img&#39;);
            img.style = &#39;display:none !important;&#39;;
            img.src = el.dataset.src;
            img.addEventListener(&#39;error&#39;, () =&gt; {
              img.remove();
              el.style.color = &#39;inherit&#39;;
              el.style.backgroundImage = &#39;none&#39;;
              el.style.background = &#39;none&#39;;
            });
            img.addEventListener(&#39;load&#39;, () =&gt; {
              img.remove();
            });
            document.body.appendChild(img);
          });
      &lt;/script&gt;</content>
        <category term="Spring" />
        <updated>2020-10-04T06:58:46.815Z</updated>
    </entry>
</feed>
